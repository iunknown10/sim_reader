##############################################################################
#                                                                            #
#                                                      30/Oct/2005  13:40:06 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  E:\yanglq\projects\agsm\firmware_ed11\iccd\iccd.c       #
#    Command line =  --cpu=m88 -ms -o E:\yanglq\projects\agsm\firmware_ed11\ #
#                    Release\Obj\ -D NDEBUG -lCN                             #
#                    E:\yanglq\projects\agsm\firmware_ed11\Release\List\     #
#                    -lB E:\yanglq\projects\agsm\firmware_ed11\Release\List\ #
#                     --initializers_in_flash -z9 --cross_call_passes=2      #
#                    -DENABLE_BIT_DEFINITIONS -e -I "E:\Program Files\IAR    #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\" -I "E:\Program Files\IAR              #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\CLIB\" --eeprom_size 512                #
#                    E:\yanglq\projects\agsm\firmware_ed11\iccd\iccd.c       #
#    List file    =  E:\yanglq\projects\agsm\firmware_ed11\Release\List\iccd #
#                    .lst                                                    #
#    Object file  =  E:\yanglq\projects\agsm\firmware_ed11\Release\Obj\iccd. #
#                    r90                                                     #
#                                                                            #
#                                                                            #
##############################################################################

E:\yanglq\projects\agsm\firmware_ed11\iccd\iccd.c
      1          #include <string.h>
      2          #include <inavr.h>
      3          #include <ioavr.h>
      4          #include "../scr/ccid.h"
      5          #include "../3gpp-aka/aka.h"
      6          
      7          extern USB_CCID_BUF ccid_buf;
      8          extern int    USBwriteLen;
      9          extern int    USBwrittenLen;
     10          extern uchar  lastRequest;
     11          

   \                                 In segment CODE, align 2, keep-with-next
     12          int iccd_XfrBlockRead()
   \                     iccd_XfrBlockRead:
     13          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
     14            int ret = 2;
   \   00000002   E002               LDI     R16, 2
   \   00000004   E010               LDI     R17, 0
     15            uchar *apdu = ccid_buf.Request.Data;
     16          
     17            if(apdu[1] == 0x88 && apdu[3] == 0x81)
   \   00000006   ....               LDI     R26, LOW(ccid_buf)
   \   00000008   ....               LDI     R27, (ccid_buf) >> 8
   \   0000000A   9619               ADIW    R27:R26, 9
   \   0000000C   912C               LD      R18, X
   \   0000000E   9719               SBIW    R27:R26, 9
   \   00000010   3828               CPI     R18, 136
   \   00000012   F519               BRNE    ??iccd_XfrBlockRead_0
   \   00000014   961B               ADIW    R27:R26, 11
   \   00000016   912C               LD      R18, X
   \   00000018   971B               SBIW    R27:R26, 11
   \   0000001A   3821               CPI     R18, 129
   \   0000001C   F4F1               BRNE    ??iccd_XfrBlockRead_0
     18            {
     19              //3GPP-AKA
     20              if(apdu[4] == 0x22)
   \   0000001E   961C               ADIW    R27:R26, 12
   \   00000020   912C               LD      R18, X
   \   00000022   971C               SBIW    R27:R26, 12
   \   00000024   3222               CPI     R18, 34
   \   00000026   F499               BRNE    ??iccd_XfrBlockRead_1
     21              {
     22                memcpy(apdu+200,apdu+5,0x22);
   \   00000028   E242               LDI     R20, 34
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   019D               MOVW    R19:R18, R27:R26
   \   0000002E   5F23               SUBI    R18, 243
   \   00000030   4F3F               SBCI    R19, 255
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   5300               SUBI    R16, 48
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   ....               RCALL   memcpy
     23                ret = run_aka(apdu+200,0x22,apdu);
   \   0000003A   01AD               MOVW    R21:R20, R27:R26
   \   0000003C   5F48               SUBI    R20, 248
   \   0000003E   4F5F               SBCI    R21, 255
   \   00000040   E222               LDI     R18, 34
   \   00000042   018D               MOVW    R17:R16, R27:R26
   \   00000044   5300               SUBI    R16, 48
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   ....               RCALL   run_aka
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   C00B               RJMP    ??iccd_XfrBlockRead_2
     24              }else{
     25                apdu[0] = 0x6c;//wrong length -  %d expected
   \                     ??iccd_XfrBlockRead_1:
   \   0000004E   E62C               LDI     R18, 108
   \   00000050   9618               ADIW    R27:R26, 8
   \   00000052   932D               ST      X+, R18
     26                apdu[1] = 0x22;
   \   00000054   E222               LDI     R18, 34
   \   00000056   932C               ST      X, R18
   \   00000058   C004               RJMP    ??iccd_XfrBlockRead_3
     27              }
     28            }else{
     29              apdu[0] = 0x6d;//INS code not supported or invalid
   \                     ??iccd_XfrBlockRead_0:
   \   0000005A   E62D               LDI     R18, 109
   \   0000005C   9618               ADIW    R27:R26, 8
   \   0000005E   932D               ST      X+, R18
     30              apdu[1] = 0x00;
   \   00000060   931C               ST      X, R17
   \                     ??iccd_XfrBlockRead_3:
   \   00000062   9719               SBIW    R27:R26, 9
     31            }
     32            ccid_buf.Response.ResponseHeader.wLength = ret;
   \                     ??iccd_XfrBlockRead_2:
   \   00000064   9616               ADIW    R27:R26, 6
   \   00000066   930D               ST      X+, R16
   \   00000068   931C               ST      X, R17
   \   0000006A   9713               SBIW    R27:R26, 3
     33            ccid_buf.Response.ResponseHeader.bError = 0;
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   932C               ST      X, R18
     34            ccid_buf.Response.ResponseHeader.bStatus = 0;
   \   00000070   932E               ST      -X, R18
     35            return ret+8;
   \   00000072   5F08               SUBI    R16, 248
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076                      REQUIRE ?Subroutine0
   \   00000076                      ;               // Fall through to label ?Subroutine0
     36          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ....               RJMP    ?EPILOGUE_B4_L09
     37          

   \                                 In segment CODE, align 2, keep-with-next
     38          int iccd_process(PUSB_CCID_REQUEST pCCIDRequest)
   \                     iccd_process:
     39          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     40            int len = 0;
   \   00000004   E000               LDI     R16, 0
   \   00000006   E010               LDI     R17, 0
     41            int wLength = pCCIDRequest->RequestHeader.wLength;
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8186               LDD     R24, Z+6
   \   0000000C   8197               LDD     R25, Z+7
     42            uchar bRequestType = pCCIDRequest->RequestHeader.bMessageType;
   \   0000000E   8121               LDD     R18, Z+1
     43          
     44            /* reset global error code */
     45            ccid_buf.Response.ResponseHeader.bMessageType = bRequestType;
   \   00000010   ....               LDI     R30, LOW(ccid_buf)
   \   00000012   ....               LDI     R31, (ccid_buf) >> 8
   \   00000014   8321               STD     Z+1, R18
     46            ccid_buf.Response.ResponseHeader.bSeq = pCCIDRequest->RequestHeader.bSeq;
   \   00000016   9612               ADIW    R27:R26, 2
   \   00000018   913C               LD      R19, X
   \   0000001A   8332               STD     Z+2, R19
     47          
     48            if(bRequestType == PC_to_RDR_IccPowerOn)
   \   0000001C   3622               CPI     R18, 98
   \   0000001E   F479               BRNE    ??iccd_process_0
     49            {
     50              ccid_buf.Response.Data[0] = 0x3b;
   \   00000020   E30B               LDI     R16, 59
   \   00000022   8700               STD     Z+8, R16
     51              ccid_buf.Response.Data[0] = 0x02;
   \   00000024   E002               LDI     R16, 2
   \   00000026   8700               STD     Z+8, R16
     52              ccid_buf.Response.Data[0] = 0x0a;
   \   00000028   E00A               LDI     R16, 10
   \   0000002A   8700               STD     Z+8, R16
     53              ccid_buf.Response.Data[0] = 0x9e;
   \   0000002C   E90E               LDI     R16, 158
   \   0000002E   8700               STD     Z+8, R16
     54              ccid_buf.Response.ResponseHeader.wLength = 4+8;/* in order to compatible with asm version only */
   \   00000030   E00C               LDI     R16, 12
   \   00000032   8306               STD     Z+6, R16
   \   00000034   8317               STD     Z+7, R17
     55              ccid_buf.Response.ResponseHeader.bError = 0;
   \   00000036   8314               STD     Z+4, R17
     56              ccid_buf.Response.ResponseHeader.bStatus = 0;
   \   00000038   8313               STD     Z+3, R17
     57              LED_ON;
   \   0000003A   9A2D               SBI     0x05, 0x05
     58              return 12;
   \   0000003C   C03F               RJMP    ??iccd_process_1
     59            }else if(bRequestType == PC_to_RDR_IccPowerOff)
   \                     ??iccd_process_0:
   \   0000003E   3623               CPI     R18, 99
   \   00000040   F419               BRNE    ??iccd_process_2
     60            {
     61              LED_OFF;
   \   00000042   982D               CBI     0x05, 0x05
     62              len = 8;
   \   00000044   E008               LDI     R16, 8
   \   00000046   C011               RJMP    ??iccd_process_3
     63            }else if(bRequestType == PC_to_RDR_XfrBlock)
   \                     ??iccd_process_2:
   \   00000048   362F               CPI     R18, 111
   \   0000004A   F4A1               BRNE    ??iccd_process_4
     64            {
     65              USBwriteLen = wLength;
   \   0000004C   ....               LDI     R26, LOW(USBwriteLen)
   \   0000004E   ....               LDI     R27, (USBwriteLen) >> 8
   \   00000050   938D               ST      X+, R24
   \   00000052   939C               ST      X, R25
     66              ccid_buf.Request.RequestHeader.wLength = wLength;
   \   00000054   8386               STD     Z+6, R24
   \   00000056   8397               STD     Z+7, R25
     67              USBwrittenLen = 0;
   \   00000058   ....               LDI     R30, LOW(USBwrittenLen)
   \   0000005A   ....               LDI     R31, (USBwrittenLen) >> 8
   \   0000005C   8300               ST      Z, R16
   \   0000005E   8301               STD     Z+1, R16
     68              lastRequest = PC_to_RDR_XfrBlock;
   \   00000060   E60F               LDI     R16, 111
   \   00000062   9300....           STS     lastRequest, R16
     69              len = -1;
     70            }else if(bRequestType == PC_to_RDR_XfrBlockRead)
     71            {
     72              if((lastRequest == PC_to_RDR_XfrBlock) && (USBwriteLen == USBwrittenLen))
     73              {
     74                LED_TOGGLE;
     75                len = iccd_XfrBlockRead();
     76                lastRequest = PC_to_RDR_XfrBlockRead;
     77              }else if(lastRequest == PC_to_RDR_XfrBlockRead)
     78              {
     79                len = ccid_buf.Request.RequestHeader.wLength+8;
     80              }
     81            }else{
     82              len = -1;
   \                     ??iccd_process_5:
   \   00000066   EF0F               LDI     R16, 255
   \   00000068   EF1F               LDI     R17, 255
     83            }
     84            return len > wLength ? wLength : len;
   \                     ??iccd_process_3:
   \   0000006A   1780               CP      R24, R16
   \   0000006C   0791               CPC     R25, R17
   \   0000006E   F524               BRGE    ??iccd_process_6
   \   00000070   019C               MOVW    R19:R18, R25:R24
   \   00000072   C023               RJMP    ??iccd_process_7
   \                     ??iccd_process_4:
   \   00000074   3720               CPI     R18, 112
   \   00000076   F7B9               BRNE    ??iccd_process_5
   \   00000078   9120....           LDS     R18, lastRequest
   \   0000007C   362F               CPI     R18, 111
   \   0000007E   F4A9               BRNE    ??iccd_process_8
   \   00000080   ....               LDI     R30, LOW(USBwriteLen)
   \   00000082   ....               LDI     R31, (USBwriteLen) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   ....               LDI     R30, LOW(USBwrittenLen)
   \   0000008A   ....               LDI     R31, (USBwrittenLen) >> 8
   \   0000008C   8140               LD      R20, Z
   \   0000008E   8151               LDD     R21, Z+1
   \   00000090   1724               CP      R18, R20
   \   00000092   0735               CPC     R19, R21
   \   00000094   F751               BRNE    ??iccd_process_3
   \   00000096   B103               IN      R16, 0x03
   \   00000098   FF05               SBRS    R16, 5
   \   0000009A   9A2D               SBI     0x05, 0x05
   \                     ??iccd_process_9:
   \   0000009C   FD05               SBRC    R16, 5
   \   0000009E   982D               CBI     0x05, 0x05
   \                     ??iccd_process_10:
   \   000000A0   ....               RCALL   iccd_XfrBlockRead
   \   000000A2   E720               LDI     R18, 112
   \   000000A4   9320....           STS     lastRequest, R18
   \   000000A8   CFE0               RJMP    ??iccd_process_3
   \                     ??iccd_process_8:
   \   000000AA   3720               CPI     R18, 112
   \   000000AC   F6F1               BRNE    ??iccd_process_3
   \   000000AE   8106               LDD     R16, Z+6
   \   000000B0   8117               LDD     R17, Z+7
   \   000000B2   5F08               SUBI    R16, 248
   \   000000B4   4F1F               SBCI    R17, 255
   \   000000B6   CFD9               RJMP    ??iccd_process_3
   \                     ??iccd_process_6:
   \   000000B8   0198               MOVW    R19:R18, R17:R16
   \                     ??iccd_process_7:
   \   000000BA   0189               MOVW    R17:R16, R19:R18
   \                     ??iccd_process_1:
   \   000000BC   ....               RJMP    ?Subroutine0
     85          }

   \                                 In segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS 1
     86          
     87          
     88          

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     iccd_XfrBlockRead          4      2
       -> memcpy                4      2
       -> run_aka               4      2
     iccd_process               4      2
       -> iccd_XfrBlockRead     4      2


   Segment part sizes:

     Function/Label    Bytes
     --------------    -----
     iccd_XfrBlockRead  118
     ?Subroutine0         4
     iccd_process       190
     _A_PORTB             1
     _A_PINB              1

 
   2 bytes in segment ABSOLUTE
 312 bytes in segment CODE
 
 312 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none

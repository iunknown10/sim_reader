##############################################################################
#                                                                            #
#                                                      30/Oct/2005  13:40:10 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\sha.c    #
#    Command line =  --cpu=m88 -ms -o E:\yanglq\projects\agsm\firmware_ed11\ #
#                    Release\Obj\ -D NDEBUG -lCN                             #
#                    E:\yanglq\projects\agsm\firmware_ed11\Release\List\     #
#                    -lB E:\yanglq\projects\agsm\firmware_ed11\Release\List\ #
#                     --initializers_in_flash -z9 --cross_call_passes=2      #
#                    -DENABLE_BIT_DEFINITIONS -e -I "E:\Program Files\IAR    #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\" -I "E:\Program Files\IAR              #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\CLIB\" --eeprom_size 512                #
#                    E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\sha.c    #
#    List file    =  E:\yanglq\projects\agsm\firmware_ed11\Release\List\sha. #
#                    lst                                                     #
#    Object file  =  E:\yanglq\projects\agsm\firmware_ed11\Release\Obj\sha.r #
#                    90                                                      #
#                                                                            #
#                                                                            #
##############################################################################

E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\sha.c
      1          /* "sha.c" */
      2          
      3          #include "sha.h"
      4          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          static unsigned long A, B, C, D, E;
   \                     ??A:
   \   00000000                      DS 4
   \   00000004                      DS 4
   \   00000008                      DS 4
   \   0000000C                      DS 4
   \   00000010                      DS 4
      6          
      7          #define K1	0x5a827999
      8          #define K2	0x6ed9eba1
      9          #define K3	0x8f1bbcdc
     10          #define K4	0xca62c1d6
     11          
     12          #define S(a,n) ((a << n) | (a >> (32-n)))
     13          
     14          static

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     15          unsigned char SHA_IV[20] = { 0x67, 0x45, 0x23, 0x01, 0xef, 0xcd, 0xab, 0x89,
   \                     ??SHA_IV:
   \   00000000                      DS 20
   \   00000014                      REQUIRE `?<Initializer for SHA_IV>`
     16          							 0x98, 0xba, 0xdc, 0xfe, 0x10, 0x32, 0x54, 0x76,
     17          							 0xc3, 0xd2, 0xe1, 0xf0 };
     18          
     19          /* SHA ft(B,C,D) + Kt */
     20          

   \                                 In segment CODE, align 2, keep-with-next
     21          static unsigned long ftk(int t)
   \                     ??ftk:
     22          {
   \   00000000   ....               RCALL   ?PROLOGUE6_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   0128               MOVW    R5:R4, R17:R16
     23          	if (t < 20)
   \   00000004   ....               LDI     R30, LOW(??A)
   \   00000006   ....               LDI     R31, (??A) >> 8
   \   00000008   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   0000000A   8400               LDD     R0, Z+8
   \   0000000C   8411               LDD     R1, Z+9
   \   0000000E   8422               LDD     R2, Z+10
   \   00000010   8433               LDD     R3, Z+11
   \   00000012   8184               LDD     R24, Z+4
   \   00000014   8195               LDD     R25, Z+5
   \   00000016   81A6               LDD     R26, Z+6
   \   00000018   81B7               LDD     R27, Z+7
   \   0000001A   E104               LDI     R16, 20
   \   0000001C   1640               CP      R4, R16
   \   0000001E   E000               LDI     R16, 0
   \   00000020   0650               CPC     R5, R16
   \   00000022   F4BC               BRGE    ??ftk_1
     24          		return( ((B & C) | (~B & D)) + K1 );
   \   00000024   2208               AND     R0, R24
   \   00000026   2219               AND     R1, R25
   \   00000028   222A               AND     R2, R26
   \   0000002A   223B               AND     R3, R27
   \   0000002C   9580               COM     R24
   \   0000002E   9590               COM     R25
   \   00000030   95A0               COM     R26
   \   00000032   95B0               COM     R27
   \   00000034   2384               AND     R24, R20
   \   00000036   2395               AND     R25, R21
   \   00000038   23A6               AND     R26, R22
   \   0000003A   23B7               AND     R27, R23
   \   0000003C   2980               OR      R24, R0
   \   0000003E   2991               OR      R25, R1
   \   00000040   29A2               OR      R26, R2
   \   00000042   29B3               OR      R27, R3
   \   00000044   5687               SUBI    R24, 103
   \   00000046   4896               SBCI    R25, 134
   \   00000048   47AD               SBCI    R26, 125
   \   0000004A   4AB5               SBCI    R27, 165
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   019D               MOVW    R19:R18, R27:R26
   \   00000050   C036               RJMP    ??ftk_2
     25          	else if (t < 40)
   \                     ??ftk_1:
   \   00000052   0180               MOVW    R17:R16, R1:R0
   \   00000054   0191               MOVW    R19:R18, R3:R2
   \   00000056   2708               EOR     R16, R24
   \   00000058   2719               EOR     R17, R25
   \   0000005A   272A               EOR     R18, R26
   \   0000005C   273B               EOR     R19, R27
   \   0000005E   2704               EOR     R16, R20
   \   00000060   2715               EOR     R17, R21
   \   00000062   2726               EOR     R18, R22
   \   00000064   2737               EOR     R19, R23
   \   00000066   E2E8               LDI     R30, 40
   \   00000068   164E               CP      R4, R30
   \   0000006A   E0E0               LDI     R30, 0
   \   0000006C   065E               CPC     R5, R30
   \   0000006E   F42C               BRGE    ??ftk_3
     26          		return( (B ^ C ^ D) + K2 );
   \   00000070   550F               SUBI    R16, 95
   \   00000072   4114               SBCI    R17, 20
   \   00000074   4226               SBCI    R18, 38
   \   00000076   4931               SBCI    R19, 145
   \   00000078   C022               RJMP    ??ftk_2
     27          	else if (t < 60)
   \                     ??ftk_3:
   \   0000007A   E3EC               LDI     R30, 60
   \   0000007C   164E               CP      R4, R30
   \   0000007E   E0E0               LDI     R30, 0
   \   00000080   065E               CPC     R5, R30
   \   00000082   F4CC               BRGE    ??ftk_4
     28          		return( ((B & C) | (B & D) | (C & D)) + K3 );
   \   00000084   018A               MOVW    R17:R16, R21:R20
   \   00000086   019B               MOVW    R19:R18, R23:R22
   \   00000088   2900               OR      R16, R0
   \   0000008A   2911               OR      R17, R1
   \   0000008C   2922               OR      R18, R2
   \   0000008E   2933               OR      R19, R3
   \   00000090   2308               AND     R16, R24
   \   00000092   2319               AND     R17, R25
   \   00000094   232A               AND     R18, R26
   \   00000096   233B               AND     R19, R27
   \   00000098   2140               AND     R20, R0
   \   0000009A   2151               AND     R21, R1
   \   0000009C   2162               AND     R22, R2
   \   0000009E   2173               AND     R23, R3
   \   000000A0   2B40               OR      R20, R16
   \   000000A2   2B51               OR      R21, R17
   \   000000A4   2B62               OR      R22, R18
   \   000000A6   2B73               OR      R23, R19
   \   000000A8   5244               SUBI    R20, 36
   \   000000AA   4453               SBCI    R21, 67
   \   000000AC   4E64               SBCI    R22, 228
   \   000000AE   4770               SBCI    R23, 112
   \   000000B0   018A               MOVW    R17:R16, R21:R20
   \   000000B2   019B               MOVW    R19:R18, R23:R22
   \   000000B4   C004               RJMP    ??ftk_2
     29          	else
     30          		return( (B ^ C ^ D) + K4 );
   \                     ??ftk_4:
   \   000000B6   520A               SUBI    R16, 42
   \   000000B8   431E               SBCI    R17, 62
   \   000000BA   492D               SBCI    R18, 157
   \   000000BC   4335               SBCI    R19, 53
   \                     ??ftk_2:
   \   000000BE   E0E6               LDI     R30, 6
   \   000000C0   ....               RJMP    ?EPILOGUE_B6_L09
     31          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   8544               LDD     R20, Z+12
   \   00000002   8555               LDD     R21, Z+13
   \   00000004   8566               LDD     R22, Z+14
   \   00000006   8577               LDD     R23, Z+15
   \   00000008   9508               RET
     32          
     33          /* the 80 rounds of SHA */
     34          

   \                                 In segment CODE, align 2, keep-with-next
     35          static
     36          void shaHash(SHA_INFO *sha_info)
   \                     ??shaHash:
     37          {
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002   97EF               SBIW    R29:R28, 63
   \   00000004   9765               SBIW    R29:R28, 21
   \   00000006   01D8               MOVW    R27:R26, R17:R16
     38          	unsigned long t, A0, B0, C0, D0, E0, W[16];
     39          	int i, s;
     40          
     41          	/* set the temporary digest values from the current digest,
     42          	   using shifts to ensure machine-independence */
     43          
     44          	A  = (unsigned long)sha_info->digest[0] << 24;
     45          	A += (unsigned long)sha_info->digest[1] << 16;
     46          	A += (unsigned long)sha_info->digest[2] << 8;
     47          	A += (unsigned long)sha_info->digest[3];
   \   00000008   ....               LDI     R24, LOW(??A)
   \   0000000A   ....               LDI     R25, (??A) >> 8
   \   0000000C   917C               LD      R23, X
   \   0000000E   E060               LDI     R22, 0
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   8121               LDD     R18, Z+1
   \   00000014   E000               LDI     R16, 0
   \   00000016   0F06               ADD     R16, R22
   \   00000018   8152               LDD     R21, Z+2
   \   0000001A   8103               LDD     R16, Z+3
   \   0000001C   01FC               MOVW    R31:R30, R25:R24
   \   0000001E   8300               ST      Z, R16
   \   00000020   8351               STD     Z+1, R21
   \   00000022   8322               STD     Z+2, R18
   \   00000024   8373               STD     Z+3, R23
     48          	B  = (unsigned long)sha_info->digest[4] << 24;
     49          	B += (unsigned long)sha_info->digest[5] << 16;
     50          	B += (unsigned long)sha_info->digest[6] << 8;
     51          	B += (unsigned long)sha_info->digest[7];
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8134               LDD     R19, Z+4
   \   0000002A   8165               LDD     R22, Z+5
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   8116               LDD     R17, Z+6
   \   00000030   8087               LDD     R8, Z+7
   \   00000032   2499               CLR     R9
   \   00000034   24AA               CLR     R10
   \   00000036   24BB               CLR     R11
   \   00000038   1E91               ADC     R9, R17
   \   0000003A   1EA6               ADC     R10, R22
   \   0000003C   1EB3               ADC     R11, R19
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   8284               STD     Z+4, R8
   \   00000042   8315               STD     Z+5, R17
   \   00000044   8366               STD     Z+6, R22
   \   00000046   8337               STD     Z+7, R19
     52          	C  = (unsigned long)sha_info->digest[8] << 24;
     53          	C += (unsigned long)sha_info->digest[9] << 16;
     54          	C += (unsigned long)sha_info->digest[10] << 8;
     55          	C += (unsigned long)sha_info->digest[11];
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8530               LDD     R19, Z+8
   \   0000004C   E020               LDI     R18, 0
   \   0000004E   8561               LDD     R22, Z+9
   \   00000050   E070               LDI     R23, 0
   \   00000052   1F73               ADC     R23, R19
   \   00000054   8512               LDD     R17, Z+10
   \   00000056   E030               LDI     R19, 0
   \   00000058   1F26               ADC     R18, R22
   \   0000005A   1F37               ADC     R19, R23
   \   0000005C   8543               LDD     R20, Z+11
   \   0000005E   E060               LDI     R22, 0
   \   00000060   E070               LDI     R23, 0
   \   00000062   ....               RCALL   ??Subroutine8_0
   \                     ??CrossCallReturnLabel_16:
   \   00000064   01FC               MOVW    R31:R30, R25:R24
   \   00000066   8740               STD     Z+8, R20
   \   00000068   8711               STD     Z+9, R17
   \   0000006A   8722               STD     Z+10, R18
   \   0000006C   8733               STD     Z+11, R19
     56          	D  = (unsigned long)sha_info->digest[12] << 24;
     57          	D += (unsigned long)sha_info->digest[13] << 16;
     58          	D += (unsigned long)sha_info->digest[14] << 8;
     59          	D += (unsigned long)sha_info->digest[15];
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   8434               LDD     R3, Z+12
   \   00000072   2422               CLR     R2
   \   00000074   8525               LDD     R18, Z+13
   \   00000076   E030               LDI     R19, 0
   \   00000078   E010               LDI     R17, 0
   \   0000007A   1D33               ADC     R19, R3
   \   0000007C   8416               LDD     R1, Z+14
   \   0000007E   2433               CLR     R3
   \   00000080   1E22               ADC     R2, R18
   \   00000082   1E33               ADC     R3, R19
   \   00000084   8507               LDD     R16, Z+15
   \   00000086   E020               LDI     R18, 0
   \   00000088   E030               LDI     R19, 0
   \   0000008A   1D11               ADC     R17, R1
   \   0000008C   1D22               ADC     R18, R2
   \   0000008E   1D33               ADC     R19, R3
   \   00000090   01FC               MOVW    R31:R30, R25:R24
   \   00000092   8704               STD     Z+12, R16
   \   00000094   8615               STD     Z+13, R1
   \   00000096   8626               STD     Z+14, R2
   \   00000098   8637               STD     Z+15, R3
     60          	E  = (unsigned long)sha_info->digest[16] << 24;
     61          	E += (unsigned long)sha_info->digest[17] << 16;
     62          	E += (unsigned long)sha_info->digest[18] << 8;
     63          	E += (unsigned long)sha_info->digest[19];
   \   0000009A   01FD               MOVW    R31:R30, R27:R26
   \   0000009C   8830               LDD     R3, Z+16
   \   0000009E   8861               LDD     R6, Z+17
   \   000000A0   2477               CLR     R7
   \   000000A2   1C73               ADC     R7, R3
   \   000000A4   0113               MOVW    R3:R2, R7:R6
   \   000000A6   8812               LDD     R1, Z+18
   \   000000A8   8843               LDD     R4, Z+19
   \   000000AA   2455               CLR     R5
   \   000000AC   1C51               ADC     R5, R1
   \   000000AE   0102               MOVW    R1:R0, R5:R4
   \   000000B0   01FC               MOVW    R31:R30, R25:R24
   \   000000B2   8A40               STD     Z+16, R4
   \   000000B4   8A51               STD     Z+17, R5
   \   000000B6   8A62               STD     Z+18, R6
   \   000000B8   8A73               STD     Z+19, R7
     64          
     65          	/* save A-E */
     66          
     67          	A0 = A;
   \   000000BA   8040               LD      R4, Z
   \   000000BC   8051               LDD     R5, Z+1
   \   000000BE   8062               LDD     R6, Z+2
   \   000000C0   8073               LDD     R7, Z+3
   \   000000C2   8248               ST      Y, R4
   \   000000C4   8259               STD     Y+1, R5
   \   000000C6   826A               STD     Y+2, R6
   \   000000C8   827B               STD     Y+3, R7
     68          	B0 = B;
   \   000000CA   828C               STD     Y+4, R8
   \   000000CC   829D               STD     Y+5, R9
   \   000000CE   82AE               STD     Y+6, R10
   \   000000D0   82BF               STD     Y+7, R11
     69          	C0 = C;
   \   000000D2   8748               STD     Y+8, R20
   \   000000D4   8759               STD     Y+9, R21
   \   000000D6   876A               STD     Y+10, R22
   \   000000D8   877B               STD     Y+11, R23
     70          	D0 = D;
   \   000000DA   870C               STD     Y+12, R16
   \   000000DC   871D               STD     Y+13, R17
   \   000000DE   872E               STD     Y+14, R18
   \   000000E0   873F               STD     Y+15, R19
     71          	E0 = E;
   \   000000E2   8A08               STD     Y+16, R0
   \   000000E4   8A19               STD     Y+17, R1
   \   000000E6   8A2A               STD     Y+18, R2
   \   000000E8   8A3B               STD     Y+19, R3
     72          
     73          	/* move the data into the first 16 words of W */
     74          
     75          	for (i = 0; i < 16; i++)
   \   000000EA   2444               CLR     R4
   \   000000EC   2455               CLR     R5
     76          		W[i] = sha_info->data[i];
   \                     ??shaHash_1:
   \   000000EE   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_28:
   \   000000F0   01FD               MOVW    R31:R30, R27:R26
   \   000000F2   0FE4               ADD     R30, R20
   \   000000F4   1FF5               ADC     R31, R21
   \   000000F6   8D04               LDD     R16, Z+28
   \   000000F8   8D15               LDD     R17, Z+29
   \   000000FA   8D26               LDD     R18, Z+30
   \   000000FC   8D37               LDD     R19, Z+31
   \   000000FE   01FE               MOVW    R31:R30, R29:R28
   \   00000100   0FE4               ADD     R30, R20
   \   00000102   1FF5               ADC     R31, R21
   \   00000104   8B04               STD     Z+20, R16
   \   00000106   8B15               STD     Z+21, R17
   \   00000108   8B26               STD     Z+22, R18
   \   0000010A   8B37               STD     Z+23, R19
   \   0000010C   E001               LDI     R16, 1
   \   0000010E   0E40               ADD     R4, R16
   \   00000110   E000               LDI     R16, 0
   \   00000112   1E50               ADC     R5, R16
   \   00000114   E100               LDI     R16, 16
   \   00000116   1640               CP      R4, R16
   \   00000118   E000               LDI     R16, 0
   \   0000011A   0650               CPC     R5, R16
   \   0000011C   F344               BRLT    ??shaHash_1
     77          
     78          	/* perform the 80 rounds, using the "alternate method" in which
     79          	   the later values of W are computed in place */
     80          
     81          	for (i = 0; i < 80; i++)
   \   0000011E   2444               CLR     R4
   \   00000120   2455               CLR     R5
     82          	{
     83          		s = i & 0x0f;
   \                     ??shaHash_2:
   \   00000122   E00F               LDI     R16, 15
   \   00000124   2E60               MOV     R6, R16
   \   00000126   2477               CLR     R7
   \   00000128   2064               AND     R6, R4
     84          
     85          		if (i >= 16)
   \   0000012A   E100               LDI     R16, 16
   \   0000012C   1640               CP      R4, R16
   \   0000012E   0457               CPC     R5, R7
   \   00000130   F1D4               BRLT    ??shaHash_3
     86          		{
     87          			t = W[(i-3) & 0x0f] ^ W[(i-8) & 0x0f] ^
     88          				W[(i-14)&0x0f] ^ W[s];
   \   00000132   01AE               MOVW    R21:R20, R29:R28
   \   00000134   5E4C               SUBI    R20, 236
   \   00000136   4F5F               SBCI    R21, 255
   \   00000138   2D06               MOV     R16, R6
   \   0000013A   0F00               LSL     R16
   \   0000013C   0F00               LSL     R16
   \   0000013E   0F40               ADD     R20, R16
   \   00000140   1D57               ADC     R21, R7
   \   00000142   018E               MOVW    R17:R16, R29:R28
   \   00000144   5E0C               SUBI    R16, 236
   \   00000146   4F1F               SBCI    R17, 255
   \   00000148   2DE4               MOV     R30, R4
   \   0000014A   50E3               SUBI    R30, 3
   \   0000014C   70EF               ANDI    R30, 0x0F
   \   0000014E   0FEE               LSL     R30
   \   00000150   0FEE               LSL     R30
   \   00000152   0F0E               ADD     R16, R30
   \   00000154   1D17               ADC     R17, R7
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_33:
   \   0000015A   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_35:
   \   0000015C   5008               SUBI    R16, 8
   \   0000015E   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   00000160   8000               LD      R0, Z
   \   00000162   8011               LDD     R1, Z+1
   \   00000164   8022               LDD     R2, Z+2
   \   00000166   8033               LDD     R3, Z+3
   \   00000168   2408               EOR     R0, R8
   \   0000016A   2419               EOR     R1, R9
   \   0000016C   242A               EOR     R2, R10
   \   0000016E   243B               EOR     R3, R11
   \   00000170   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_36:
   \   00000172   500E               SUBI    R16, 14
   \   00000174   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   00000176   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_37:
   \   00000178   2500               EOR     R16, R0
   \   0000017A   2511               EOR     R17, R1
   \   0000017C   2522               EOR     R18, R2
   \   0000017E   2533               EOR     R19, R3
   \   00000180   01FA               MOVW    R31:R30, R21:R20
   \   00000182   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_34:
   \   00000184   2680               EOR     R8, R16
   \   00000186   2691               EOR     R9, R17
   \   00000188   26A2               EOR     R10, R18
   \   0000018A   26B3               EOR     R11, R19
     89          			W[s] = S(t,1);
   \   0000018C   0184               MOVW    R17:R16, R9:R8
   \   0000018E   0195               MOVW    R19:R18, R11:R10
   \   00000190   0F00               LSL     R16
   \   00000192   1F11               ROL     R17
   \   00000194   1F22               ROL     R18
   \   00000196   1F33               ROL     R19
   \   00000198   2400               CLR     R0
   \   0000019A   1C00               ROL     R0
   \   0000019C   2A00               OR      R0, R16
   \   0000019E   8200               ST      Z, R0
   \   000001A0   8311               STD     Z+1, R17
   \   000001A2   8322               STD     Z+2, R18
   \   000001A4   8333               STD     Z+3, R19
     90          		}
     91          
     92          		t = S(A,5) + ftk(i) + E + W[s];
   \                     ??shaHash_3:
   \   000001A6   01FC               MOVW    R31:R30, R25:R24
   \   000001A8   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_38:
   \   000001AA   E045               LDI     R20, 5
   \   000001AC   ....               RCALL   ?L_SHL_L03
   \   000001AE   8083               LDD     R8, Z+3
   \   000001B0   9486               LSR     R8
   \   000001B2   9486               LSR     R8
   \   000001B4   9486               LSR     R8
   \   000001B6   2A80               OR      R8, R16
   \   000001B8   2E91               MOV     R9, R17
   \   000001BA   0159               MOVW    R11:R10, R19:R18
   \   000001BC   0182               MOVW    R17:R16, R5:R4
   \   000001BE   ....               RCALL   ??ftk
   \   000001C0   0D08               ADD     R16, R8
   \   000001C2   1D19               ADC     R17, R9
   \   000001C4   1D2A               ADC     R18, R10
   \   000001C6   1D3B               ADC     R19, R11
   \   000001C8   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_63:
   \   000001CA   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_17:
   \   000001CC   01FE               MOVW    R31:R30, R29:R28
   \   000001CE   0C66               LSL     R6
   \   000001D0   0C66               LSL     R6
   \   000001D2   0DE6               ADD     R30, R6
   \   000001D4   1DF7               ADC     R31, R7
   \   000001D6   8884               LDD     R8, Z+20
   \   000001D8   8895               LDD     R9, Z+21
   \   000001DA   88A6               LDD     R10, Z+22
   \   000001DC   88B7               LDD     R11, Z+23
   \   000001DE   0E84               ADD     R8, R20
   \   000001E0   1E95               ADC     R9, R21
   \   000001E2   1EA6               ADC     R10, R22
   \   000001E4   1EB7               ADC     R11, R23
     93          		E = D;
   \   000001E6   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   000001E8   8B00               STD     Z+16, R16
   \   000001EA   8B11               STD     Z+17, R17
   \   000001EC   8B22               STD     Z+18, R18
   \   000001EE   8B33               STD     Z+19, R19
     94          		D = C;
   \   000001F0   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_40:
   \   000001F2   8704               STD     Z+12, R16
   \   000001F4   8715               STD     Z+13, R17
   \   000001F6   8726               STD     Z+14, R18
   \   000001F8   8737               STD     Z+15, R19
     95          		C = S(B,30);
   \   000001FA   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_42:
   \   000001FC   E4E0               LDI     R30, 64
   \   000001FE   2F70               MOV     R23, R16
   \   00000200   9F7E               MUL     R23, R30
   \   00000202   E042               LDI     R20, 2
   \   00000204   ....               RCALL   ?UL_SHR_L03
   \   00000206   2930               OR      R19, R0
   \   00000208   01FC               MOVW    R31:R30, R25:R24
   \   0000020A   8700               STD     Z+8, R16
   \   0000020C   8711               STD     Z+9, R17
   \   0000020E   8722               STD     Z+10, R18
   \   00000210   8733               STD     Z+11, R19
     96          		B = A;
   \   00000212   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_39:
   \   00000214   8304               STD     Z+4, R16
   \   00000216   8315               STD     Z+5, R17
   \   00000218   8326               STD     Z+6, R18
   \   0000021A   8337               STD     Z+7, R19
     97          		A = t;
   \   0000021C   8280               ST      Z, R8
   \   0000021E   8291               STD     Z+1, R9
   \   00000220   82A2               STD     Z+2, R10
   \   00000222   82B3               STD     Z+3, R11
     98          	}
   \   00000224   E001               LDI     R16, 1
   \   00000226   0E40               ADD     R4, R16
   \   00000228   1C57               ADC     R5, R7
   \   0000022A   E500               LDI     R16, 80
   \   0000022C   1640               CP      R4, R16
   \   0000022E   0457               CPC     R5, R7
   \   00000230   F40C               BRGE    $+2+2
   \   00000232   CF77               RJMP    ??shaHash_2
     99          
    100          	/* add in the original values of A-E */
    101          
    102          	A += A0;
   \   00000234   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_44:
   \   00000236   01A4               MOVW    R21:R20, R9:R8
   \   00000238   01B5               MOVW    R23:R22, R11:R10
   \   0000023A   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_18:
   \   0000023C   ....               RCALL   ?Subroutine19
    103          	B += B0;
   \                     ??CrossCallReturnLabel_46:
   \   0000023E   810C               LDD     R16, Y+4
   \   00000240   811D               LDD     R17, Y+5
   \   00000242   812E               LDD     R18, Y+6
   \   00000244   813F               LDD     R19, Y+7
   \   00000246   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_52:
   \   00000248   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_19:
   \   0000024A   ....               RCALL   ?Subroutine23
    104          	C += C0;
   \                     ??CrossCallReturnLabel_54:
   \   0000024C   8508               LDD     R16, Y+8
   \   0000024E   8519               LDD     R17, Y+9
   \   00000250   852A               LDD     R18, Y+10
   \   00000252   853B               LDD     R19, Y+11
   \   00000254   8540               LDD     R20, Z+8
   \   00000256   8551               LDD     R21, Z+9
   \   00000258   8562               LDD     R22, Z+10
   \   0000025A   8573               LDD     R23, Z+11
   \   0000025C   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_20:
   \   0000025E   8740               STD     Z+8, R20
   \   00000260   8751               STD     Z+9, R21
   \   00000262   8762               STD     Z+10, R22
   \   00000264   8773               STD     Z+11, R23
    105          	D += D0;
   \   00000266   850C               LDD     R16, Y+12
   \   00000268   851D               LDD     R17, Y+13
   \   0000026A   852E               LDD     R18, Y+14
   \   0000026C   853F               LDD     R19, Y+15
   \   0000026E   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   00000270   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_21:
   \   00000272   8744               STD     Z+12, R20
   \   00000274   8755               STD     Z+13, R21
   \   00000276   8766               STD     Z+14, R22
   \   00000278   8777               STD     Z+15, R23
    106          	E += E0;
   \   0000027A   8908               LDD     R16, Y+16
   \   0000027C   8919               LDD     R17, Y+17
   \   0000027E   892A               LDD     R18, Y+18
   \   00000280   893B               LDD     R19, Y+19
   \   00000282   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_62:
   \   00000284   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_22:
   \   00000286   8B40               STD     Z+16, R20
   \   00000288   8B51               STD     Z+17, R21
   \   0000028A   8B62               STD     Z+18, R22
   \   0000028C   8B73               STD     Z+19, R23
    107          
    108          	/* save resulting digest, again using shifts to ensure
    109          	   machine independence */
    110          
    111          	sha_info->digest[0] = (unsigned char)(A >> 24);
   \   0000028E   8103               LDD     R16, Z+3
   \   00000290   930C               ST      X, R16
    112          	sha_info->digest[1] = (unsigned char)((A >> 16) & 0xff);
   \   00000292   8102               LDD     R16, Z+2
   \   00000294   01FD               MOVW    R31:R30, R27:R26
   \   00000296   8301               STD     Z+1, R16
    113          	sha_info->digest[2] = (unsigned char)((A >> 8) & 0xff);
   \   00000298   01FC               MOVW    R31:R30, R25:R24
   \   0000029A   8101               LDD     R16, Z+1
   \   0000029C   01FD               MOVW    R31:R30, R27:R26
   \   0000029E   8302               STD     Z+2, R16
    114          	sha_info->digest[3] = (unsigned char)(A & 0xff);
   \   000002A0   01FC               MOVW    R31:R30, R25:R24
   \   000002A2   8100               LD      R16, Z
   \   000002A4   01FD               MOVW    R31:R30, R27:R26
   \   000002A6   8303               STD     Z+3, R16
    115          	sha_info->digest[4] = (unsigned char)(B >> 24);
   \   000002A8   01FC               MOVW    R31:R30, R25:R24
   \   000002AA   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_43:
   \   000002AC   01FD               MOVW    R31:R30, R27:R26
   \   000002AE   8334               STD     Z+4, R19
    116          	sha_info->digest[5] = (unsigned char)((B >> 16) & 0xff);
   \   000002B0   8325               STD     Z+5, R18
    117          	sha_info->digest[6] = (unsigned char)((B >> 8) & 0xff);
   \   000002B2   8316               STD     Z+6, R17
    118          	sha_info->digest[7] = (unsigned char)(B & 0xff);
   \   000002B4   8307               STD     Z+7, R16
    119          	sha_info->digest[8] = (unsigned char)(C >> 24);
   \   000002B6   01FC               MOVW    R31:R30, R25:R24
   \   000002B8   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_41:
   \   000002BA   01FD               MOVW    R31:R30, R27:R26
   \   000002BC   8730               STD     Z+8, R19
    120          	sha_info->digest[9] = (unsigned char)((C >> 16) & 0xff);
   \   000002BE   8721               STD     Z+9, R18
    121          	sha_info->digest[10] = (unsigned char)((C >> 8) & 0xff);
   \   000002C0   8712               STD     Z+10, R17
    122          	sha_info->digest[11] = (unsigned char)(C & 0xff);
   \   000002C2   8703               STD     Z+11, R16
    123          	sha_info->digest[12] = (unsigned char)(D >> 24);
   \   000002C4   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   000002C6   01FD               MOVW    R31:R30, R27:R26
   \   000002C8   8734               STD     Z+12, R19
    124          	sha_info->digest[13] = (unsigned char)((D >> 16) & 0xff);
   \   000002CA   8725               STD     Z+13, R18
    125          	sha_info->digest[14] = (unsigned char)((D >> 8) & 0xff);
   \   000002CC   8716               STD     Z+14, R17
    126          	sha_info->digest[15] = (unsigned char)(D & 0xff);
   \   000002CE   8707               STD     Z+15, R16
    127          	sha_info->digest[16] = (unsigned char)(E >> 24);
   \   000002D0   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_64:
   \   000002D2   01FD               MOVW    R31:R30, R27:R26
   \   000002D4   8B70               STD     Z+16, R23
    128          	sha_info->digest[17] = (unsigned char)((E >> 16) & 0xff);
   \   000002D6   8B61               STD     Z+17, R22
    129          	sha_info->digest[18] = (unsigned char)((E >> 8) & 0xff);
   \   000002D8   8B52               STD     Z+18, R21
    130          	sha_info->digest[19] = (unsigned char)(E & 0xff);
   \   000002DA   8B43               STD     Z+19, R20
    131          
    132          	/* clear the data so that further updates can be added in */
    133          
    134          	for (i = 0; i < 16; i++)
   \   000002DC   2444               CLR     R4
   \   000002DE   2455               CLR     R5
    135          		sha_info->data[i] = 0;
   \                     ??shaHash_4:
   \   000002E0   01FD               MOVW    R31:R30, R27:R26
   \   000002E2   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_29:
   \   000002E4   0FE4               ADD     R30, R20
   \   000002E6   1FF5               ADC     R31, R21
   \   000002E8   8E74               STD     Z+28, R7
   \   000002EA   8E75               STD     Z+29, R7
   \   000002EC   8E76               STD     Z+30, R7
   \   000002EE   8E77               STD     Z+31, R7
   \   000002F0   E001               LDI     R16, 1
   \   000002F2   0E40               ADD     R4, R16
   \   000002F4   1C57               ADC     R5, R7
   \   000002F6   E100               LDI     R16, 16
   \   000002F8   1640               CP      R4, R16
   \   000002FA   0457               CPC     R5, R7
   \   000002FC   F38C               BRLT    ??shaHash_4
    136          }
   \   000002FE   96EF               ADIW    R29:R28, 63
   \   00000300   9665               ADIW    R29:R28, 21
   \   00000302   E0EC               LDI     R30, 12
   \   00000304   ....               RJMP    ?EPILOGUE_B12_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   8104               LDD     R16, Z+4
   \   00000002   8115               LDD     R17, Z+5
   \   00000004   8126               LDD     R18, Z+6
   \   00000006   8137               LDD     R19, Z+7
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   8500               LDD     R16, Z+8
   \   00000002   8511               LDD     R17, Z+9
   \   00000004   8522               LDD     R18, Z+10
   \   00000006   8533               LDD     R19, Z+11
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   8122               LDD     R18, Z+2
   \   00000006   8133               LDD     R19, Z+3
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   019E               MOVW    R19:R18, R29:R28
   \   00000002   5E2C               SUBI    R18, 236
   \   00000004   4F3F               SBCI    R19, 255
   \   00000006   2D04               MOV     R16, R4
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   8080               LD      R8, Z
   \   00000002   8091               LDD     R9, Z+1
   \   00000004   80A2               LDD     R10, Z+2
   \   00000006   80B3               LDD     R11, Z+3
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   700F               ANDI    R16, 0x0F
   \   00000002   0F00               LSL     R16
   \   00000004   0F00               LSL     R16
   \   00000006   0F20               ADD     R18, R16
   \   00000008   1D37               ADC     R19, R7
   \   0000000A   01F9               MOVW    R31:R30, R19:R18
   \   0000000C   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   01A2               MOVW    R21:R20, R5:R4
   \                     ??Subroutine11_0:
   \   00000002   0F44               LSL     R20
   \   00000004   1F55               ROL     R21
   \   00000006   0F44               LSL     R20
   \   00000008   1F55               ROL     R21
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   8504               LDD     R16, Z+12
   \   00000004   8515               LDD     R17, Z+13
   \   00000006   8526               LDD     R18, Z+14
   \   00000008   8537               LDD     R19, Z+15
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002                      REQUIRE ?Subroutine27
   \   00000002                      ;               // Fall through to label ?Subroutine27

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   8940               LDD     R20, Z+16
   \   00000002   8951               LDD     R21, Z+17
   \   00000004   8962               LDD     R22, Z+18
   \   00000006   8973               LDD     R23, Z+19
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   8108               LD      R16, Y
   \   00000002   8119               LDD     R17, Y+1
   \   00000004   812A               LDD     R18, Y+2
   \   00000006   813B               LDD     R19, Y+3
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0F40               ADD     R20, R16
   \                     ??Subroutine8_0:
   \   00000002   1F51               ADC     R21, R17
   \   00000004   1F62               ADC     R22, R18
   \   00000006   1F73               ADC     R23, R19
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   8344               STD     Z+4, R20
   \   00000002   8355               STD     Z+5, R21
   \   00000004   8366               STD     Z+6, R22
   \   00000006   8377               STD     Z+7, R23
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   8144               LDD     R20, Z+4
   \   00000002   8155               LDD     R21, Z+5
   \   00000004   8166               LDD     R22, Z+6
   \   00000006   8177               LDD     R23, Z+7
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   8340               ST      Z, R20
   \   00000002   8351               STD     Z+1, R21
   \   00000004   8362               STD     Z+2, R22
   \   00000006   8373               STD     Z+3, R23
   \   00000008   9508               RET
    137          
    138          /* initialize sha_info */
    139          

   \                                 In segment CODE, align 2, keep-with-next
    140          void shaInitial(SHA_INFO *sha_info)
   \                     shaInitial:
    141          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01F8               MOVW    R31:R30, R17:R16
    142          	int i;
    143          
    144          	/* set digest to its initial value.  Done one char at a time
    145          	   to ensure machine independence. */
    146          
    147          	for (i = 0; i < 20; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
    148          		sha_info->digest[i] = SHA_IV[i];
   \                     ??shaInitial_0:
   \   00000008   01DC               MOVW    R27:R26, R25:R24
   \   0000000A   ....               SUBI    R26, LOW((-(??SHA_IV) & 0xFFFF))
   \   0000000C   ....               SBCI    R27, (-(??SHA_IV) & 0xFFFF) >> 8
   \   0000000E   910C               LD      R16, X
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   0FA8               ADD     R26, R24
   \   00000014   1FB9               ADC     R27, R25
   \   00000016   930C               ST      X, R16
   \   00000018   9601               ADIW    R25:R24, 1
   \   0000001A   3184               CPI     R24, 20
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   0790               CPC     R25, R16
   \   00000020   F39C               BRLT    ??shaInitial_0
    149          
    150          	/* clear data so that updates can be added in */
    151          
    152          	for (i = 0; i < 16; i++)
   \   00000022   E080               LDI     R24, 0
   \   00000024   E090               LDI     R25, 0
    153          		sha_info->data[i] = 0;
   \                     ??shaInitial_1:
   \   00000026   01DF               MOVW    R27:R26, R31:R30
   \   00000028   965C               ADIW    R27:R26, 28
   \   0000002A   01AC               MOVW    R21:R20, R25:R24
   \   0000002C   ....               RCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_30:
   \   0000002E   0FA4               ADD     R26, R20
   \   00000030   1FB5               ADC     R27, R21
   \   00000032   930D               ST      X+, R16
   \   00000034   930D               ST      X+, R16
   \   00000036   930D               ST      X+, R16
   \   00000038   930C               ST      X, R16
   \   0000003A   9601               ADIW    R25:R24, 1
   \   0000003C   3180               CPI     R24, 16
   \   0000003E   0790               CPC     R25, R16
   \   00000040   F394               BRLT    ??shaInitial_1
    154          
    155          	/* set bit count to zero */
    156          
    157          	sha_info->count[0] = sha_info->count[1] = 0;
   \   00000042   8F00               STD     Z+24, R16
   \   00000044   8F01               STD     Z+25, R16
   \   00000046   8F02               STD     Z+26, R16
   \   00000048   8F03               STD     Z+27, R16
   \   0000004A   8B04               STD     Z+20, R16
   \   0000004C   8B05               STD     Z+21, R16
   \   0000004E   8B06               STD     Z+22, R16
   \   00000050   8B07               STD     Z+23, R16
    158          }
   \   00000052                      REQUIRE ?Subroutine28
   \   00000052                      ;               // Fall through to label ?Subroutine28

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ....               RJMP    ?EPILOGUE_B4_L09
    159          
    160          /* update the digest using additional message data */
    161          

   \                                 In segment CODE, align 2, keep-with-next
    162          void shaUpdate(SHA_INFO *sha_info,
   \                     shaUpdate:
    163          			   unsigned char *buffer,
    164          			   unsigned long offset,
    165          			   unsigned long count)
    166          {
   \   00000000   ....               RCALL   ?PROLOGUE16_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002                      REQUIRE ?Register_R12_is_cg_reg
   \   00000002                      REQUIRE ?Register_R13_is_cg_reg
   \   00000002                      REQUIRE ?Register_R14_is_cg_reg
   \   00000002                      REQUIRE ?Register_R15_is_cg_reg
   \   00000002   9726               SBIW    R29:R28, 6
   \   00000004   832C               STD     Y+4, R18
   \   00000006   833D               STD     Y+5, R19
   \   00000008   8348               ST      Y, R20
   \   0000000A   8359               STD     Y+1, R21
   \   0000000C   836A               STD     Y+2, R22
   \   0000000E   837B               STD     Y+3, R23
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   888E               LDD     R8, Y+22
   \   00000014   889F               LDD     R9, Y+23
   \   00000016   8CA8               LDD     R10, Y+24
   \   00000018   8CB9               LDD     R11, Y+25
    167          	unsigned long data_count, t, mask_size;
    168          	unsigned char *bptr, c, last, mask;
    169          
    170          	/* enter the message data into the data buffer.  When the buffer
    171          	   is full (512 bits entered, update the digest and clear the
    172          	   data buffer for the next update.  */
    173          
    174          	data_count = sha_info->count[1]%512;
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   8C00               LDD     R0, Z+24
   \   0000001E   8C11               LDD     R1, Z+25
   \   00000020   E001               LDI     R16, 1
   \   00000022   2210               AND     R1, R16
   \   00000024   2422               CLR     R2
   \   00000026   2433               CLR     R3
    175          	bptr = buffer + (offset/8);
   \   00000028   01C9               MOVW    R25:R24, R19:R18
   \   0000002A   018A               MOVW    R17:R16, R21:R20
   \   0000002C   019B               MOVW    R19:R18, R23:R22
   \   0000002E   ....               RCALL   ?Subroutine4
    176          
    177          
    178          	/* first fill the current octet of the buffer, so that
    179          	   the bit offset into the buffer is a multiple of 8 */
    180          	last = *bptr++;
    181          	if (data_count%8)
   \                     ??CrossCallReturnLabel_6:
   \   00000030   2D20               MOV     R18, R0
   \   00000032   7027               ANDI    R18, 0x07
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C08A               RJMP    ??CrossCallReturnLabel_61
    182          	{
    183          		/* get a full byte from the buffer */
    184          		c = last;
   \   00000038   2D1C               MOV     R17, R12
    185          		last = *bptr++;
    186          		if (offset%8)
   \   0000003A   8158               LD      R21, Y
   \   0000003C   7057               ANDI    R21, 0x07
   \   0000003E   F031               BREQ    ??CrossCallReturnLabel_24
    187          		{
    188          			c <<= (offset%8);
    189          			c += last >> (8 - (offset%8));
   \   00000040   2D0C               MOV     R16, R12
   \   00000042   2F45               MOV     R20, R21
   \   00000044   ....               RCALL   ?C_SHL_L01
   \   00000046   2F60               MOV     R22, R16
   \   00000048   8100               LD      R16, Z
   \   0000004A   ....               RCALL   ?Subroutine9
    190          		}
    191          
    192          		/* set mask to fill the remaining bits of the octet */
    193          		mask_size = 8 - (data_count%8);
   \                     ??CrossCallReturnLabel_24:
   \   0000004C   E048               LDI     R20, 8
   \   0000004E   E050               LDI     R21, 0
   \   00000050   E060               LDI     R22, 0
   \   00000052   E070               LDI     R23, 0
   \   00000054   2C40               MOV     R4, R0
   \   00000056   E007               LDI     R16, 7
   \   00000058   2240               AND     R4, R16
   \   0000005A   1944               SUB     R20, R4
   \   0000005C   4050               SBCI    R21, 0
   \   0000005E   4060               SBCI    R22, 0
   \   00000060   4070               SBCI    R23, 0
   \   00000062   012A               MOVW    R5:R4, R21:R20
   \   00000064   013B               MOVW    R7:R6, R23:R22
    194          		mask = 0xff << (data_count%8);
   \   00000066   EF0F               LDI     R16, 255
   \   00000068   2F42               MOV     R20, R18
   \   0000006A   ....               RCALL   ?C_SHL_L01
   \   0000006C   2F40               MOV     R20, R16
    195          
    196          		/* adjust for short count */
    197          		if (count < mask_size)
   \   0000006E   1484               CP      R8, R4
   \   00000070   0695               CPC     R9, R21
   \   00000072   06A6               CPC     R10, R22
   \   00000074   06B7               CPC     R11, R23
   \   00000076   F410               BRCC    ??CrossCallReturnLabel_50
    198          		{
    199          			mask <<= (mask_size-count);
   \   00000078   2D44               MOV     R20, R4
   \   0000007A   ....               RCALL   ?Subroutine21
    200          			mask_size = count;
    201          		}
    202          
    203          		/* store the bits */
    204          		c = (c & mask) >> (data_count%8);
    205          		sha_info->data[data_count/32] += (unsigned long)c << 8*(3 - ((data_count%32)/8));
   \                     ??CrossCallReturnLabel_50:
   \   0000007C   2341               AND     R20, R17
   \   0000007E   2F04               MOV     R16, R20
   \   00000080   2F42               MOV     R20, R18
   \   00000082   ....               RCALL   ?UC_SHR_L01
   \   00000084   E010               LDI     R17, 0
   \   00000086   E020               LDI     R18, 0
   \   00000088   E030               LDI     R19, 0
   \   0000008A   0168               MOVW    R13:R12, R17:R16
   \   0000008C   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_48:
   \   0000008E   0186               MOVW    R17:R16, R13:R12
   \   00000090   ....               RCALL   ?L_SHL_L03
   \   00000092   0168               MOVW    R13:R12, R17:R16
   \   00000094   0179               MOVW    R15:R14, R19:R18
   \   00000096   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000098   0F00               LSL     R16
   \   0000009A   01FD               MOVW    R31:R30, R27:R26
   \   0000009C   0FE0               ADD     R30, R16
   \   0000009E   1DF2               ADC     R31, R2
   \   000000A0   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_56:
   \   000000A2   0D0C               ADD     R16, R12
   \   000000A4   1D1D               ADC     R17, R13
   \   000000A6   1D2E               ADC     R18, R14
   \   000000A8   1D3F               ADC     R19, R15
   \   000000AA   ....               RCALL   ?Subroutine25
    206          
    207          		/* update count */
    208          		t = sha_info->count[1];
   \                     ??CrossCallReturnLabel_58:
   \   000000AC   ....               RCALL   ?Subroutine7
    209          		sha_info->count[1] += mask_size;
    210          		if (sha_info->count[1] < t)
    211          			sha_info->count[0]++;
    212          
    213          		/* if the data buffer is full, update the digest */
    214          		data_count += mask_size;
   \                     ??CrossCallReturnLabel_14:
   \   000000AE   ....               RCALL   ?Subroutine0
    215          		if (data_count == 512)
    216          		{
    217          			shaHash(sha_info);
    218          			data_count = 0;
    219          		}
    220          
    221          		/* start over with updated offset and count */
    222          		offset += mask_size;
   \                     ??CrossCallReturnLabel_0:
   \   000000B0   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_45:
   \   000000B2   0D04               ADD     R16, R4
   \   000000B4   1D15               ADC     R17, R5
   \   000000B6   1D26               ADC     R18, R6
   \   000000B8   1D37               ADC     R19, R7
   \   000000BA   8308               ST      Y, R16
   \   000000BC   8319               STD     Y+1, R17
   \   000000BE   832A               STD     Y+2, R18
   \   000000C0   833B               STD     Y+3, R19
    223          		count -= mask_size;
   \   000000C2   ....               RCALL   ?Subroutine26
    224          		bptr = buffer + (offset/8);
   \                     ??CrossCallReturnLabel_60:
   \   000000C4   818C               LDD     R24, Y+4
   \   000000C6   819D               LDD     R25, Y+5
   \   000000C8   ....               RCALL   ?Subroutine4
    225          		last = *bptr++;
   \                     ??CrossCallReturnLabel_7:
   \   000000CA   C040               RJMP    ??CrossCallReturnLabel_61
    226          	}
    227          	while (count != 0)
    228          	{
    229          		/* get the next full octet from the buffer */
    230          		c = last;
   \                     ??shaUpdate_0:
   \   000000CC   2D1C               MOV     R17, R12
    231          		last = *bptr++;
   \   000000CE   ....               RCALL   ??Subroutine4_0
    232          		if (offset%8)
   \                     ??CrossCallReturnLabel_8:
   \   000000D0   8158               LD      R21, Y
   \   000000D2   7057               ANDI    R21, 0x07
   \   000000D4   F031               BREQ    ??CrossCallReturnLabel_25
    233          		{
    234          			c <<= (offset%8);
    235          			c += last >> (8 - (offset%8));
   \   000000D6   2F01               MOV     R16, R17
   \   000000D8   2F45               MOV     R20, R21
   \   000000DA   ....               RCALL   ?C_SHL_L01
   \   000000DC   2F60               MOV     R22, R16
   \   000000DE   2D0C               MOV     R16, R12
   \   000000E0   ....               RCALL   ?Subroutine9
    236          		}
    237          
    238          		/* set mask to a full octet */
    239          		mask_size = 8;
   \                     ??CrossCallReturnLabel_25:
   \   000000E2   E008               LDI     R16, 8
   \   000000E4   2E40               MOV     R4, R16
   \   000000E6   2455               CLR     R5
   \   000000E8   2466               CLR     R6
   \   000000EA   2477               CLR     R7
    240          		mask = 0xff;
   \   000000EC   EF4F               LDI     R20, 255
    241          
    242          		/* adjust for short count */
    243          		if (count < mask_size)
   \   000000EE   1680               CP      R8, R16
   \   000000F0   0495               CPC     R9, R5
   \   000000F2   04A5               CPC     R10, R5
   \   000000F4   04B5               CPC     R11, R5
   \   000000F6   F418               BRCC    ??CrossCallReturnLabel_51
    244          		{
    245          			mask <<= (mask_size-count);
   \   000000F8   EF0F               LDI     R16, 255
   \   000000FA   E048               LDI     R20, 8
   \   000000FC   ....               RCALL   ?Subroutine21
    246          			mask_size = count;
    247          		}
    248          
    249          		/* store the bits */
    250          		c &= mask;
    251          		sha_info->data[data_count/32] += (unsigned long)c << 8*(3 - ((data_count%32)/8));
   \                     ??CrossCallReturnLabel_51:
   \   000000FE   2341               AND     R20, R17
   \   00000100   E010               LDI     R17, 0
   \   00000102   931A               ST      -Y, R17
   \   00000104   931A               ST      -Y, R17
   \   00000106   931A               ST      -Y, R17
   \   00000108   934A               ST      -Y, R20
   \   0000010A   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_49:
   \   0000010C   9109               LD      R16, Y+
   \   0000010E   9621               ADIW    R29:R28, 1
   \   00000110   9129               LD      R18, Y+
   \   00000112   9139               LD      R19, Y+
   \   00000114   ....               RCALL   ?L_SHL_L03
   \   00000116   933A               ST      -Y, R19
   \   00000118   932A               ST      -Y, R18
   \   0000011A   931A               ST      -Y, R17
   \   0000011C   930A               ST      -Y, R16
   \   0000011E   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000120   1F11               ROL     R17
   \   00000122   0F00               LSL     R16
   \   00000124   1F11               ROL     R17
   \   00000126   01FD               MOVW    R31:R30, R27:R26
   \   00000128   0FE0               ADD     R30, R16
   \   0000012A   1FF1               ADC     R31, R17
   \   0000012C   9109               LD      R16, Y+
   \   0000012E   9119               LD      R17, Y+
   \   00000130   9129               LD      R18, Y+
   \   00000132   9139               LD      R19, Y+
   \   00000134   8D44               LDD     R20, Z+28
   \   00000136   8D55               LDD     R21, Z+29
   \   00000138   8D66               LDD     R22, Z+30
   \   0000013A   8D77               LDD     R23, Z+31
   \   0000013C   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_23:
   \   0000013E   8F44               STD     Z+28, R20
   \   00000140   8F55               STD     Z+29, R21
   \   00000142   8F66               STD     Z+30, R22
   \   00000144   8F77               STD     Z+31, R23
    252          
    253          		/* update count */
    254          		t = sha_info->count[1];
   \   00000146   ....               RCALL   ?Subroutine7
    255          		sha_info->count[1] += mask_size;
    256          		if (sha_info->count[1] < t)
    257          			sha_info->count[0]++;
    258          
    259          		/* if the data buffer is full, update the digest */
    260          		data_count += mask_size;
   \                     ??CrossCallReturnLabel_15:
   \   00000148   ....               RCALL   ?Subroutine0
    261          		if (data_count == 512)
    262          		{
    263                                  shaHash(sha_info);
    264          			data_count = 0;
    265          		}
    266          
    267          		count -= mask_size;
   \                     ??CrossCallReturnLabel_1:
   \   0000014A   ....               RCALL   ?Subroutine26
    268          	}
   \                     ??CrossCallReturnLabel_61:
   \   0000014C   2D08               MOV     R16, R8
   \   0000014E   2909               OR      R16, R9
   \   00000150   290A               OR      R16, R10
   \   00000152   290B               OR      R16, R11
   \   00000154   F009               BREQ    $+2+2
   \   00000156   CFBA               RJMP    ??shaUpdate_0
    269          }
   \   00000158   9626               ADIW    R29:R28, 6
   \   0000015A   E1E4               LDI     R30, 20
   \   0000015C   ....               RJMP    ?EPILOGUE_B16_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   1884               SUB     R8, R4
   \   00000002   0895               SBC     R9, R5
   \   00000004   08A6               SBC     R10, R6
   \   00000006   08B7               SBC     R11, R7
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   1948               SUB     R20, R8
   \   00000002   ....               RCALL   ?C_SHL_L01
   \   00000004   2F40               MOV     R20, R16
   \   00000006   0124               MOVW    R5:R4, R9:R8
   \   00000008   0135               MOVW    R7:R6, R11:R10
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   E043               LDI     R20, 3
   \   00000002   2D00               MOV     R16, R0
   \   00000004   710F               ANDI    R16, 0x1F
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   9506               LSR     R16
   \   0000000C   1B40               SUB     R20, R16
   \   0000000E   0F44               LSL     R20
   \   00000010   0F44               LSL     R20
   \   00000012   0F44               LSL     R20
   \   00000014   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E048               LDI     R20, 8
   \   00000004   1B45               SUB     R20, R21
   \   00000006   ....               RCALL   ?SS_SHR_L02
   \   00000008   2F10               MOV     R17, R16
   \   0000000A   0F16               ADD     R17, R22
   \   0000000C   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8D00               LDD     R16, Z+24
   \   00000004   8D11               LDD     R17, Z+25
   \   00000006   8D22               LDD     R18, Z+26
   \   00000008   8D33               LDD     R19, Z+27
   \   0000000A   01A8               MOVW    R21:R20, R17:R16
   \   0000000C   01B9               MOVW    R23:R22, R19:R18
   \   0000000E   0D44               ADD     R20, R4
   \   00000010   1D55               ADC     R21, R5
   \   00000012   1D66               ADC     R22, R6
   \   00000014   1D77               ADC     R23, R7
   \   00000016   8F40               STD     Z+24, R20
   \   00000018   8F51               STD     Z+25, R21
   \   0000001A   8F62               STD     Z+26, R22
   \   0000001C   8F73               STD     Z+27, R23
   \   0000001E   1740               CP      R20, R16
   \   00000020   0751               CPC     R21, R17
   \   00000022   0762               CPC     R22, R18
   \   00000024   0773               CPC     R23, R19
   \   00000026   F460               BRCC    ??Subroutine7_0
   \   00000028   8904               LDD     R16, Z+20
   \   0000002A   8915               LDD     R17, Z+21
   \   0000002C   8926               LDD     R18, Z+22
   \   0000002E   8937               LDD     R19, Z+23
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   4F2F               SBCI    R18, 255
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   8B04               STD     Z+20, R16
   \   0000003A   8B15               STD     Z+21, R17
   \   0000003C   8B26               STD     Z+22, R18
   \   0000003E   8B37               STD     Z+23, R19
   \                     ??Subroutine7_0:
   \   00000040   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   E043               LDI     R20, 3
   \   00000002   ....               RCALL   ?UL_SHR_L03
   \   00000004   0F80               ADD     R24, R16
   \   00000006   1F91               ADC     R25, R17
   \                     ??Subroutine4_0:
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   90C1               LD      R12, Z+
   \   0000000C   01CF               MOVW    R25:R24, R31:R30
   \   0000000E   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0180               MOVW    R17:R16, R1:R0
   \   00000002   0191               MOVW    R19:R18, R3:R2
   \   00000004   E045               LDI     R20, 5
   \   00000006   ....               RCALL   ?UL_SHR_L03
   \   00000008   0F00               LSL     R16
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0C04               ADD     R0, R4
   \   00000002   1C15               ADC     R1, R5
   \   00000004   1C26               ADC     R2, R6
   \   00000006   1C37               ADC     R3, R7
   \   00000008   E000               LDI     R16, 0
   \   0000000A   1600               CP      R0, R16
   \   0000000C   E002               LDI     R16, 2
   \   0000000E   0610               CPC     R1, R16
   \   00000010   E000               LDI     R16, 0
   \   00000012   0620               CPC     R2, R16
   \   00000014   0630               CPC     R3, R16
   \   00000016   F431               BRNE    ??Subroutine0_0
   \   00000018   018D               MOVW    R17:R16, R27:R26
   \   0000001A   ....               RCALL   ??shaHash
   \   0000001C   2400               CLR     R0
   \   0000001E   2411               CLR     R1
   \   00000020   2422               CLR     R2
   \   00000022   2433               CLR     R3
   \                     ??Subroutine0_0:
   \   00000024   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   8F04               STD     Z+28, R16
   \   00000002   8F15               STD     Z+29, R17
   \   00000004   8F26               STD     Z+30, R18
   \   00000006   8F37               STD     Z+31, R19
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   8D04               LDD     R16, Z+28
   \   00000002   8D15               LDD     R17, Z+29
   \   00000004   8D26               LDD     R18, Z+30
   \   00000006   8D37               LDD     R19, Z+31
   \   00000008   9508               RET
    270          
    271          /* add pad bit of '1', zero fill and bit length, then update the digest */
    272          

   \                                 In segment CODE, align 2, keep-with-next
    273          void shaFinal(SHA_INFO *sha_info)
   \                     shaFinal:
    274          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01C8               MOVW    R25:R24, R17:R16
    275          	/* add the pad bit of '1' */
    276          
    277          	sha_info->data[(sha_info->count[1]%512)/32] +=
    278          		1L << (31 - (sha_info->count[1]%32));
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   9654               ADIW    R27:R26, 20
   \   00000008   E001               LDI     R16, 1
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   E030               LDI     R19, 0
   \   00000010   E14F               LDI     R20, 31
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8154               LDD     R21, Z+4
   \   00000016   715F               ANDI    R21, 0x1F
   \   00000018   1B45               SUB     R20, R21
   \   0000001A   ....               RCALL   ?L_SHL_L03
   \   0000001C   0108               MOVW    R1:R0, R17:R16
   \   0000001E   0119               MOVW    R3:R2, R19:R18
   \   00000020   8104               LDD     R16, Z+4
   \   00000022   8115               LDD     R17, Z+5
   \   00000024   7011               ANDI    R17, 0x01
   \   00000026   E045               LDI     R20, 5
   \   00000028   ....               RCALL   ?US_SHR_L02
   \   0000002A   0F00               LSL     R16
   \   0000002C   0F00               LSL     R16
   \   0000002E   01FC               MOVW    R31:R30, R25:R24
   \   00000030   0FE0               ADD     R30, R16
   \   00000032   1FF1               ADC     R31, R17
   \   00000034   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_57:
   \   00000036   0D00               ADD     R16, R0
   \   00000038   1D11               ADC     R17, R1
   \   0000003A   1D22               ADC     R18, R2
   \   0000003C   1D33               ADC     R19, R3
   \   0000003E   ....               RCALL   ?Subroutine25
    279          
    280          	/* if the data buffer is full, update the digest */
    281          
    282          	if ((sha_info->count[1]%512) == 511)
   \                     ??CrossCallReturnLabel_59:
   \   00000040   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_26:
   \   00000042   3F0F               CPI     R16, 255
   \   00000044   4011               SBCI    R17, 1
   \   00000046   F409               BRNE    ??CrossCallReturnLabel_13
    283          		shaHash(sha_info);
   \   00000048   ....               RCALL   ?Subroutine6
    284          
    285          	/* if there isn't room for 64 bits of bit length, leave the
    286          	   buffer zero filled to the end, update the digest and clear
    287          	   the buffer.  */
    288          
    289          	if ((sha_info->count[1]%512) > (512-65))
   \                     ??CrossCallReturnLabel_13:
   \   0000004A   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_27:
   \   0000004C   3C00               CPI     R16, 192
   \   0000004E   4011               SBCI    R17, 1
   \   00000050   F008               BRCS    ??CrossCallReturnLabel_12
    290          		shaHash(sha_info);
   \   00000052   ....               RCALL   ?Subroutine6
    291          
    292          	/* put in the bit length */
    293          
    294          	sha_info->data[14] = sha_info->count[0];
   \                     ??CrossCallReturnLabel_12:
   \   00000054   018C               MOVW    R17:R16, R25:R24
   \   00000056   5A0C               SUBI    R16, 172
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   914D               LD      R20, X+
   \   0000005C   915D               LD      R21, X+
   \   0000005E   916D               LD      R22, X+
   \   00000060   917C               LD      R23, X
   \   00000062   9713               SBIW    R27:R26, 3
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               RCALL   ?Subroutine19
    295          	sha_info->data[15] = sha_info->count[1];
   \                     ??CrossCallReturnLabel_47:
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_53:
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               RCALL   ?Subroutine23
    296          
    297          	/* update the digest */
    298          
    299          	shaHash(sha_info);
   \                     ??CrossCallReturnLabel_55:
   \   00000070   ....               RCALL   ?Subroutine6
    300          }
   \                     ??CrossCallReturnLabel_11:
   \   00000072   ....               RJMP    ?Subroutine28

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8104               LDD     R16, Z+4
   \   00000004   8115               LDD     R17, Z+5
   \   00000006   7011               ANDI    R17, 0x01
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   018C               MOVW    R17:R16, R25:R24
   \   00000002   ....               RJMP    ??shaHash

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for SHA_IV>`:
   \   00000000   45670123CDEF       DB 103, 69, 35, 1, 239, 205, 171, 137, 152, 186, 220, 254, 16, 50, 84
   \              89ABBA98FEDC
   \              321054      
   \   0000000F   C376E1D2F0         DB 118, 195, 210, 225, 240

   Maximum stack usage in bytes:

     Function     CSTACK RSTACK
     --------     ------ ------
     ftk              6      2
     shaFinal         4      4
       -> shaHash     4      2
       -> shaHash     4      2
       -> shaHash     4      2
     shaHash        100      4
       -> ftk       100      2
     shaInitial       4      2
     shaUpdate       30      4
       -> shaHash    26      2
       -> shaHash    26      2


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     A                           20
     SHA_IV                      20
     ftk                        194
     ?Subroutine5                10
     shaHash                    774
     ?Subroutine17               10
     ?Subroutine16               10
     ?Subroutine15               10
     ?Subroutine14               10
     ?Subroutine13               10
     ?Subroutine12               14
     ?Subroutine11               12
     ?Subroutine3                12
     ?Subroutine2                 2
     ?Subroutine27               10
     ?Subroutine18               10
     ?Subroutine8                10
     ?Subroutine23               10
     ?Subroutine22               10
     ?Subroutine19               10
     shaInitial                  82
     ?Subroutine28                4
     shaUpdate                  350
     ?Subroutine26               10
     ?Subroutine21               12
     ?Subroutine20               22
     ?Subroutine9                14
     ?Subroutine7                66
     ?Subroutine4                16
     ?Subroutine1                12
     ?Subroutine0                38
     ?Subroutine25               10
     ?Subroutine24               10
     shaFinal                   116
     ?Subroutine10               10
     ?Subroutine6                 4
     ?<Initializer for SHA_IV>   20
      Others                     12

 
 1 904 bytes in segment CODE
    12 bytes in segment INITTAB
    20 bytes in segment NEAR_I
    20 bytes in segment NEAR_ID
    20 bytes in segment NEAR_Z
 
 1 924 bytes of CODE memory (+ 12 bytes shared)
    40 bytes of DATA memory

Errors: none
Warnings: none

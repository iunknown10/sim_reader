##############################################################################
#                                                                            #
#                                                      30/Oct/2005  13:54:34 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  E:\yanglq\projects\agsm\firmware_ed11\scr\iso7816.c     #
#    Command line =  --cpu=m88 -ms -o E:\yanglq\projects\agsm\firmware_ed11\ #
#                    Release\Obj\ -D NDEBUG -lCN                             #
#                    E:\yanglq\projects\agsm\firmware_ed11\Release\List\     #
#                    -lB E:\yanglq\projects\agsm\firmware_ed11\Release\List\ #
#                     --initializers_in_flash -z9 --cross_call_passes=2      #
#                    -DENABLE_BIT_DEFINITIONS -e -I "E:\Program Files\IAR    #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\" -I "E:\Program Files\IAR              #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\CLIB\" --eeprom_size 512                #
#                    E:\yanglq\projects\agsm\firmware_ed11\scr\iso7816.c     #
#    List file    =  E:\yanglq\projects\agsm\firmware_ed11\Release\List\iso7 #
#                    816.lst                                                 #
#    Object file  =  E:\yanglq\projects\agsm\firmware_ed11\Release\Obj\iso78 #
#                    16.r90                                                  #
#                                                                            #
#                                                                            #
##############################################################################

E:\yanglq\projects\agsm\firmware_ed11\scr\iso7816.c
      1          /* iso7816.c 2005-10-8 */
      2          
      3          #include <ioavr.h>
      4          #include "iso7816.h"
      5          
      6          #define WAIT_TIME_FLAG        while(TIFR1_Bit1 == 0){}
      7          #define TIMER_COMP_FLAG_CLR   TIFR1_Bit1 = 0x01
      8          
      9          /* variable from OCR0Ax_FREQUENCY to ERROR_CODE must be continuous in memory */

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     10          uchar OCR0Ax_FREQUENCY = ORC0Ax;
   \                     OCR0Ax_FREQUENCY:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for OCR0Ax_FREQUENCY>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     11          uchar TIMEOUT_COUNTE = 100;
   \                     TIMEOUT_COUNTE:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TIMEOUT_COUNTE>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     12          uchar TIMEOUT_COUNTL = (60000&0xff);
   \                     TIMEOUT_COUNTL:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TIMEOUT_COUNTL>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     13          uchar TIMEOUT_COUNTH = (60000>>8);
   \                     TIMEOUT_COUNTH:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TIMEOUT_COUNTH>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     14          uchar RESEND_TIMES = 2;
   \                     RESEND_TIMES:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for RESEND_TIMES>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     15          uchar TMR1_VOLATL = (124*(ORC0Ax+1)&0xff);
   \                     TMR1_VOLATL:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_VOLATL>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     16          uchar TMR1_VOLATH = 1;/* (124*(ORC0Ax+1)>>8); hacking for these variables continuous store*/
   \                     TMR1_VOLATH:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_VOLATH>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     17          uchar TMR1_0P5ETUL = (372*(ORC0Ax+1)&0xff);
   \                     TMR1_0P5ETUL:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_0P5ETUL>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     18          uchar TMR1_0P5ETUH = (372*(ORC0Ax+1)>>8);
   \                     TMR1_0P5ETUH:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_0P5ETUH>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     19          uchar TMR1_1P0ETUL = (744*(ORC0Ax+1)&0xff);
   \                     TMR1_1P0ETUL:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_1P0ETUL>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     20          uchar TMR1_1P0ETUH = (744*(ORC0Ax+1)>>8);
   \                     TMR1_1P0ETUH:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for TMR1_1P0ETUH>`

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     21          uchar ERROR_CODE = 1;/* hacking for these variables continuous store*/
   \                     ERROR_CODE:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for ERROR_CODE>`

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     22          uchar ERROR_STATUS;
   \                     ERROR_STATUS:
   \   00000000                      DS 1
     23          
     24          uchar skipProcedureNull();

   \                                 In segment CODE, align 2, keep-with-next
     25          static uchar iso7816_getbytes(uchar *data, uchar len)
   \                     ??iso7816_getbytes:
     26          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     27            uchar i = len;
   \   00000004   2F82               MOV     R24, R18
     28          
     29            while(i--)
   \                     ??iso7816_getbytes_1:
   \   00000006   2F08               MOV     R16, R24
   \   00000008   958A               DEC     R24
   \   0000000A   2300               TST     R16
   \   0000000C   F041               BREQ    ??iso7816_getbytes_2
     30            {
     31              *data++ = GetChar();
   \   0000000E   ....               RCALL   GetChar
   \   00000010   930D               ST      X+, R16
     32              if(ERROR_STATUS != 0)
   \   00000012   9100....           LDS     R16, ERROR_STATUS
   \   00000016   2300               TST     R16
   \   00000018   F3B1               BREQ    ??iso7816_getbytes_1
     33                return 1;
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   C001               RJMP    ??iso7816_getbytes_3
     34            }
     35            return 0;
   \                     ??iso7816_getbytes_2:
   \   0000001E   E000               LDI     R16, 0
   \                     ??iso7816_getbytes_3:
   \   00000020   E0E4               LDI     R30, 4
   \   00000022   ....               RJMP    ?EPILOGUE_B4_L09
     36          }
     37          

   \                                 In segment CODE, align 2, keep-with-next
     38          static uchar iso7816_sendbytes(uchar *data, uchar len, uchar cmd)
   \                     ??iso7816_sendbytes:
     39          {
   \   00000000   ....               RCALL   ?PROLOGUE5_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   2F83               MOV     R24, R19
     40            uchar i = len;
   \   00000006   2F92               MOV     R25, R18
   \   00000008   C006               RJMP    ??iso7816_sendbytes_1
     41            uchar proc;
     42            uchar ch;
     43          
     44            while(i--)
     45            {
     46              ch = *data++;
     47              if(SendChar(ch) != ch)
     48                return 1;
     49              if(GPIOR0 & (1<<ONE_BY_ONE_FLAG))
   \                     ??iso7816_sendbytes_2:
   \   0000000A   9BF1               SBIS    0x1E, 0x01
   \   0000000C   C004               RJMP    ??iso7816_sendbytes_1
     50              {
     51                proc = skipProcedureNull();
     52                if(proc == cmd)
   \   0000000E   ....               RCALL   skipProcedureNull
   \   00000010   1708               CP      R16, R24
   \   00000012   F409               BRNE    ??iso7816_sendbytes_1
     53                  GPIOR0 &= ~(1<<ONE_BY_ONE_FLAG);
   \   00000014   98F1               CBI     0x1E, 0x01
     54              }
   \                     ??iso7816_sendbytes_1:
   \   00000016   2F09               MOV     R16, R25
   \   00000018   959A               DEC     R25
   \   0000001A   2300               TST     R16
   \   0000001C   F039               BREQ    ??iso7816_sendbytes_3
   \   0000001E   904D               LD      R4, X+
   \   00000020   2D04               MOV     R16, R4
   \   00000022   ....               RCALL   SendChar
   \   00000024   1504               CP      R16, R4
   \   00000026   F389               BREQ    ??iso7816_sendbytes_2
   \   00000028   E001               LDI     R16, 1
   \   0000002A   C001               RJMP    ??iso7816_sendbytes_4
     55            }
     56            return 0;
   \                     ??iso7816_sendbytes_3:
   \   0000002C   E000               LDI     R16, 0
   \                     ??iso7816_sendbytes_4:
   \   0000002E   E0E5               LDI     R30, 5
   \   00000030   ....               RJMP    ?EPILOGUE_B5_L09
     57          }
     58          
     59          static inline void PowerPinInit()
     60          {
     61            /* Power Pin init*/
     62          
     63            DDRC |= 0x1c;
     64            DDRD &= ~(1<<C3_CLK);
     65            DDRB &= ~(1<<C2_RESET);
     66          }
     67          
     68          static inline void PowerOn()
     69          {
     70            PORTC = (PINC|0x1c);
     71            DDRD |= (1<<C3_CLK);
     72            DDRB |= (1<<C2_RESET);
     73          }
     74          

   \                                 In segment CODE, align 2, keep-with-next
     75          __version_1 void load_timer1_count(uint n)
   \                     load_timer1_count:
     76          {
     77            TCNT1H = (n>>8);
   \   00000000   93100085           STS     133, R17
     78            TCNT1L = (n&0xff);
   \   00000004   93000084           STS     132, R16
     79          }
   \   00000008   9508               RET
     80          

   \                                 In segment CODE, align 2, keep-with-next
     81          void iso7816_init()
   \                     iso7816_init:
     82          {
     83            TMR1_VOLATH = (124*(ORC0Ax+1)>>8);/* restore the value.;hacking for these variables continuous store*/
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     TMR1_VOLATH, R16
     84            /* set led pin direction out */
     85            LED_INIT;
   \   00000006   9A25               SBI     0x04, 0x05
     86          
     87            /* enable INT1 interrupt */
     88            EICRA_Bit3 = 1; EICRA_Bit2 = 0; /* falling edge */
   \   00000008   91000069           LDS     R16, 105
   \   0000000C   6008               ORI     R16, 0x08
   \   0000000E   93000069           STS     105, R16
   \   00000012   91000069           LDS     R16, 105
   \   00000016   7F0B               ANDI    R16, 0xFB
   \   00000018   93000069           STS     105, R16
     89            EIMSK_Bit1 = 1;
   \   0000001C   9AE9               SBI     0x1D, 0x01
     90          
     91            PORTB |= (1<<C2_RESET);
   \   0000001E   9A2C               SBI     0x05, 0x04
     92            PowerPinInit();
   \   00000020   B107               IN      R16, 0x07
   \   00000022   610C               ORI     R16, 0x1C
   \   00000024   B907               OUT     0x07, R16
   \   00000026   9856               CBI     0x0A, 0x06
   \   00000028   9824               CBI     0x04, 0x04
     93          
     94            /* timer1 related stuff */
     95            TCCR1A = 0;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   93000080           STS     128, R16
     96            timer1_stop();
   \   00000030   ....               RCALL   timer1_stop
     97          
     98            /* timer0 related stuff */
     99            TCCR0B = 0;
   \   00000032   E000               LDI     R16, 0
   \   00000034   BD05               OUT     0x25, R16
    100            OCR0A = ORC0Ax;
   \   00000036   E001               LDI     R16, 1
   \   00000038   BD07               OUT     0x27, R16
    101            TCCR0A = 0x42;
   \   0000003A   E402               LDI     R16, 66
   \   0000003C   BD04               OUT     0x24, R16
    102            TCCR0B = 0x01;
   \   0000003E   E001               LDI     R16, 1
   \   00000040   BD05               OUT     0x25, R16
    103          }
   \   00000042   9508               RET
    104          

   \                                 In segment CODE, align 2, keep-with-next
    105          void icc_reset()
   \                     icc_reset:
    106          {
    107            GPIOR0 = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB0E               OUT     0x1E, R16
    108            PowerOn();
   \   00000004   B106               IN      R16, 0x06
   \   00000006   610C               ORI     R16, 0x1C
   \   00000008   B908               OUT     0x08, R16
   \   0000000A   9A56               SBI     0x0A, 0x06
   \   0000000C   9A24               SBI     0x04, 0x04
    109          
    110            PORTB &= ~(1<<C2_RESET);
   \   0000000E   982C               CBI     0x05, 0x04
    111          
    112            load_timer1_count(14880);
   \   00000010   E200               LDI     R16, 32
   \   00000012   E31A               LDI     R17, 58
   \   00000014   ....               RCALL   load_timer1_count
    113            TIMER_COMP_FLAG_CLR;
   \   00000016   9AB1               SBI     0x16, 0x01
    114            timer1_start();
   \   00000018   ....               RCALL   timer1_start
    115            WAIT_TIME_FLAG;
   \                     ??icc_reset_0:
   \   0000001A   9BB1               SBIS    0x16, 0x01
   \   0000001C   CFFE               RJMP    ??icc_reset_0
    116            timer1_stop();
   \   0000001E   ....               RCALL   timer1_stop
    117          
    118            load_one_etu();
   \   00000020   ....               RCALL   load_one_etu
    119            TIMER_COMP_FLAG_CLR;
   \   00000022   9AB1               SBI     0x16, 0x01
    120          
    121            PORTB |= (1<<C2_RESET);
   \   00000024   9A2C               SBI     0x05, 0x04
    122          }
   \   00000026   9508               RET
    123          

   \                                 In segment CODE, align 2, keep-with-next
    124          uchar read_atr(uchar *data)
   \                     read_atr:
    125          {
   \   00000000   ....               RCALL   ?PROLOGUE6_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   01D8               MOVW    R27:R26, R17:R16
    126            unsigned char ret,tmp_len,tmpchar,	historical_len;
    127            unsigned char have_Check = 0;
   \   00000004   E090               LDI     R25, 0
    128          
    129            tmp_len = RESEND_TIMES;
   \   00000006   9180....           LDS     R24, RESEND_TIMES
    130            RESEND_TIMES = 0;
   \   0000000A   9390....           STS     RESEND_TIMES, R25
    131            tmpchar = GetChar();
   \   0000000E   ....               RCALL   GetChar
   \   00000010   2F20               MOV     R18, R16
    132            RESEND_TIMES = tmp_len;
   \   00000012   9380....           STS     RESEND_TIMES, R24
    133            if(tmpchar == 0x03)
   \   00000016   3003               CPI     R16, 3
   \   00000018   F481               BRNE    ??read_atr_0
    134              GPIOR0 |= (1<<REVERSE_FLAG);
   \   0000001A   9AF0               SBI     0x1E, 0x00
    135            else if(tmpchar != 0x3b)
    136              return 0;
    137            ret = 2;
   \                     ??read_atr_1:
   \   0000001C   E002               LDI     R16, 2
   \   0000001E   2E40               MOV     R4, R16
    138            data[0] = tmpchar;
   \   00000020   932C               ST      X, R18
    139            tmpchar = data[1] = GetChar();
   \   00000022   ....               RCALL   GetChar
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8301               STD     Z+1, R16
   \   00000028   2F20               MOV     R18, R16
    140            if(GPIOR0 & (1<<REVERSE_FLAG))
   \   0000002A   9BF0               SBIS    0x1E, 0x00
   \   0000002C   C002               RJMP    ??read_atr_2
    141              tmpchar = ReverseByte(tmpchar);
   \   0000002E   ....               RCALL   ReverseByte
   \   00000030   2F20               MOV     R18, R16
    142            historical_len = (tmpchar & 0xf);
   \                     ??read_atr_2:
   \   00000032   2E52               MOV     R5, R18
   \   00000034   E00F               LDI     R16, 15
   \   00000036   2250               AND     R5, R16
   \   00000038   C020               RJMP    ??read_atr_3
   \                     ??read_atr_0:
   \   0000003A   330B               CPI     R16, 59
   \   0000003C   F379               BREQ    ??read_atr_1
   \   0000003E   E000               LDI     R16, 0
   \   00000040   C02F               RJMP    ??read_atr_4
    143            while(tmpchar & 0x80)
    144            {
    145              tmp_len = ((tmpchar >> 4) & 1) + ((tmpchar >> 5) & 1) + ((tmpchar >> 6) & 1) + ((tmpchar >> 7) & 1);
   \                     ??read_atr_5:
   \   00000042   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000044   2F32               MOV     R19, R18
   \   00000046   FB36               BST     R19, 6
   \   00000048   E030               LDI     R19, 0
   \   0000004A   F930               BLD     R19, 0
   \   0000004C   0F34               ADD     R19, R20
   \   0000004E   2F82               MOV     R24, R18
   \   00000050   0F88               LSL     R24
   \   00000052   E080               LDI     R24, 0
   \   00000054   1F88               ROL     R24
   \   00000056   0F83               ADD     R24, R19
    146              iso7816_getbytes(&(data[ret]),tmp_len);
   \   00000058   2F28               MOV     R18, R24
   \   0000005A   ....               RCALL   ??iso7816_getbytes
    147              ret += tmp_len;
   \   0000005C   0E48               ADD     R4, R24
    148              tmpchar = data[ret-1];//must be TDi
   \   0000005E   E010               LDI     R17, 0
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   0DE4               ADD     R30, R4
   \   00000064   1FF1               ADC     R31, R17
   \   00000066   9122               LD      R18, -Z
    149              if(GPIOR0 & (1<<REVERSE_FLAG))
   \   00000068   9BF0               SBIS    0x1E, 0x00
   \   0000006A   C003               RJMP    ??read_atr_6
    150                tmpchar = ReverseByte(tmpchar);
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   ....               RCALL   ReverseByte
   \   00000070   2F20               MOV     R18, R16
    151              if(tmpchar&0xf)
   \                     ??read_atr_6:
   \   00000072   2F02               MOV     R16, R18
   \   00000074   700F               ANDI    R16, 0x0F
   \   00000076   F009               BREQ    ??read_atr_3
    152                have_Check = 1;
   \   00000078   E091               LDI     R25, 1
    153            }
   \                     ??read_atr_3:
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   018D               MOVW    R17:R16, R27:R26
   \   0000007E   0D04               ADD     R16, R4
   \   00000080   1F15               ADC     R17, R21
   \   00000082   FB27               BST     R18, 7
   \   00000084   2F32               MOV     R19, R18
   \   00000086   F2EE               BRTS    ??read_atr_5
    154            tmp_len = ((tmpchar >> 4) & 1) + ((tmpchar >> 5) & 1) + ((tmpchar >> 6) & 1) + historical_len + have_Check;
   \   00000088   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   0000008A   2F82               MOV     R24, R18
   \   0000008C   FB86               BST     R24, 6
   \   0000008E   E080               LDI     R24, 0
   \   00000090   F980               BLD     R24, 0
   \   00000092   0F84               ADD     R24, R20
   \   00000094   0D85               ADD     R24, R5
   \   00000096   0F89               ADD     R24, R25
    155            iso7816_getbytes(&(data[ret]),tmp_len);
   \   00000098   2F28               MOV     R18, R24
   \   0000009A   ....               RCALL   ??iso7816_getbytes
    156            return ret + tmp_len;
   \   0000009C   0D84               ADD     R24, R4
   \   0000009E   2F08               MOV     R16, R24
   \                     ??read_atr_4:
   \   000000A0                      REQUIRE ?Subroutine8
   \   000000A0                      ;               // Fall through to label ?Subroutine8
    157          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   E0E6               LDI     R30, 6
   \   00000002   ....               RJMP    ?EPILOGUE_B6_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   FB34               BST     R19, 4
   \   00000002   E030               LDI     R19, 0
   \   00000004   F930               BLD     R19, 0
   \   00000006   2F42               MOV     R20, R18
   \   00000008   FB45               BST     R20, 5
   \   0000000A   E040               LDI     R20, 0
   \   0000000C   F940               BLD     R20, 0
   \   0000000E   0F43               ADD     R20, R19
   \   00000010   9508               RET
    158          

   \                                 In segment CODE, align 2, keep-with-next
    159          uchar skipProcedureNull()
   \                     skipProcedureNull:
    160          {
   \   00000000   938A               ST      -Y, R24
    161            uchar proc;
    162            uchar nullbyte;
    163          
    164            if(GPIOR0 & (1<<REVERSE_FLAG))
   \   00000002   9BF0               SBIS    0x1E, 0x00
   \   00000004   C002               RJMP    ??skipProcedureNull_0
    165              nullbyte = 0xf9;
   \   00000006   EF89               LDI     R24, 249
   \   00000008   C001               RJMP    ??skipProcedureNull_1
    166            else
    167              nullbyte = 0x60;
   \                     ??skipProcedureNull_0:
   \   0000000A   E680               LDI     R24, 96
    168            do{
    169              proc = GetChar();
   \                     ??skipProcedureNull_1:
   \   0000000C   ....               RCALL   GetChar
    170            }while(proc == nullbyte);
   \   0000000E   1708               CP      R16, R24
   \   00000010   F3E9               BREQ    ??skipProcedureNull_1
    171            return proc;
   \   00000012   9189               LD      R24, Y+
   \   00000014   9508               RET
    172          }
    173          

   \                                 In segment CODE, align 2, keep-with-next
    174          int t0_tpdu(uchar *cmd_apdu, uint cmd_len, uchar *res_apdu)
   \                     t0_tpdu:
    175          {
   \   00000000   ....               RCALL   ?PROLOGUE6_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
   \   00000006   012A               MOVW    R5:R4, R21:R20
    176            uchar proc;
    177            if(*cmd_apdu == 0xff)/* is PTS*/
   \   00000008   910C               LD      R16, X
   \   0000000A   3F0F               CPI     R16, 255
   \   0000000C   F449               BRNE    ??t0_tpdu_0
    178            {
    179              if(iso7816_sendbytes(cmd_apdu,cmd_len,0))
   \   0000000E   E030               LDI     R19, 0
   \   00000010   ....               RCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_12:
   \   00000012   F009               BREQ    $+2+2
   \   00000014   C04D               RJMP    ??t0_tpdu_1
    180               goto error_end;
    181              if(iso7816_getbytes(res_apdu,cmd_len))
   \   00000016   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   00000018   F009               BREQ    $+2+2
   \   0000001A   C04A               RJMP    ??t0_tpdu_1
    182               goto error_end;
    183              return cmd_len;
   \   0000001C   018C               MOVW    R17:R16, R25:R24
   \   0000001E   C04A               RJMP    ??t0_tpdu_2
    184            }else if(cmd_len == 5)/* read data from smart card */
   \                     ??t0_tpdu_0:
   \   00000020   3025               CPI     R18, 5
   \   00000022   E000               LDI     R16, 0
   \   00000024   0790               CPC     R25, R16
   \   00000026   F501               BRNE    ??t0_tpdu_3
    185            {
    186              if(iso7816_sendbytes(cmd_apdu,5,0))
   \   00000028   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_10:
   \   0000002A   F009               BREQ    $+2+2
   \   0000002C   C041               RJMP    ??t0_tpdu_1
    187               goto error_end;
    188              proc = skipProcedureNull();
   \   0000002E   ....               RCALL   skipProcedureNull
    189              if( (proc == cmd_apdu[1])
    190                  || (proc == (cmd_apdu[1]+1))
    191                  || (proc == (uchar)~cmd_apdu[1])
    192                  || (proc == (uchar)~(cmd_apdu[1]+1)) )
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   1701               CP      R16, R17
   \   00000036   F031               BREQ    ??t0_tpdu_4
   \   00000038   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   0000003A   F021               BREQ    ??t0_tpdu_4
   \   0000003C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_7:
   \   0000003E   F011               BREQ    ??t0_tpdu_4
   \   00000040   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00000042   F459               BRNE    ??t0_tpdu_5
    193              {
    194                  uchar res_len = cmd_apdu[4];
   \                     ??t0_tpdu_4:
   \   00000044   8184               LDD     R24, Z+4
    195                  if(GPIOR0 & (1<<REVERSE_FLAG))
   \   00000046   9BF0               SBIS    0x1E, 0x00
   \   00000048   C003               RJMP    ??t0_tpdu_6
    196                    res_len = ReverseByte(res_len);
   \   0000004A   2F08               MOV     R16, R24
   \   0000004C   ....               RCALL   ReverseByte
   \   0000004E   2F80               MOV     R24, R16
    197                  res_len+=2;
   \                     ??t0_tpdu_6:
   \   00000050   5F8E               SUBI    R24, 254
    198                  if(iso7816_getbytes(res_apdu,res_len))
   \   00000052   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   00000054   F569               BRNE    ??t0_tpdu_1
    199                    goto error_end;
    200                  return res_len;
   \   00000056   2F08               MOV     R16, R24
   \   00000058   C02C               RJMP    ??t0_tpdu_7
    201              }else{/* is SW1 */
    202                res_apdu[0] = proc;
   \                     ??t0_tpdu_5:
   \   0000005A   01F2               MOVW    R31:R30, R5:R4
   \   0000005C   8300               ST      Z, R16
    203                res_apdu[1] = GetChar();
   \   0000005E   ....               RCALL   GetChar
   \   00000060   01F2               MOVW    R31:R30, R5:R4
   \   00000062   8301               STD     Z+1, R16
    204                return 2;
   \   00000064   E002               LDI     R16, 2
   \   00000066   C025               RJMP    ??t0_tpdu_7
    205              }
    206            }else if(cmd_len > 5)/* write data to smart card */
   \                     ??t0_tpdu_3:
   \   00000068   3026               CPI     R18, 6
   \   0000006A   4090               SBCI    R25, 0
   \   0000006C   F108               BRCS    ??t0_tpdu_1
    207            {
    208                if(iso7816_sendbytes(cmd_apdu,5,0))
   \   0000006E   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_11:
   \   00000070   F4F9               BRNE    ??t0_tpdu_1
    209                  goto error_end;
    210                proc = skipProcedureNull();
   \   00000072   ....               RCALL   skipProcedureNull
    211                if(proc == (uchar)~cmd_apdu[1]
    212                   || proc == (uchar)~(cmd_apdu[1]+1)
    213                   || proc == cmd_apdu[1]
    214                   || proc == (cmd_apdu[1]+1))
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   00000078   F039               BREQ    ??t0_tpdu_8
   \   0000007A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   0000007C   F029               BREQ    ??t0_tpdu_8
   \   0000007E   8111               LDD     R17, Z+1
   \   00000080   1701               CP      R16, R17
   \   00000082   F011               BREQ    ??t0_tpdu_8
   \   00000084   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000086   F749               BRNE    ??t0_tpdu_5
    215                {
    216                  if(proc == (uchar)~cmd_apdu[1] || proc == (uchar)~(cmd_apdu[1]+1))
   \                     ??t0_tpdu_8:
   \   00000088   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_9:
   \   0000008A   F011               BREQ    ??t0_tpdu_9
   \   0000008C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   0000008E   F411               BRNE    ??t0_tpdu_10
    217                  {
    218                    /* Next data byte is transferred subsequently */
    219                    GPIOR0 |= (1<<ONE_BY_ONE_FLAG);
   \                     ??t0_tpdu_9:
   \   00000090   9AF1               SBI     0x1E, 0x01
   \   00000092   C001               RJMP    ??t0_tpdu_11
    220                  }else
    221                  {/* All remaining data bytes are transferred subsequently */
    222                    GPIOR0 &= ~(1<<ONE_BY_ONE_FLAG);
   \                     ??t0_tpdu_10:
   \   00000094   98F1               CBI     0x1E, 0x01
    223                  }
    224                  uchar data_len = cmd_apdu[4];
   \                     ??t0_tpdu_11:
   \   00000096   8124               LDD     R18, Z+4
    225                  if(GPIOR0 & (1<<REVERSE_FLAG))
   \   00000098   9BF0               SBIS    0x1E, 0x00
   \   0000009A   C003               RJMP    ??t0_tpdu_12
    226                    data_len = ReverseByte(data_len);
   \   0000009C   2F02               MOV     R16, R18
   \   0000009E   ....               RCALL   ReverseByte
   \   000000A0   2F20               MOV     R18, R16
    227                  if(iso7816_sendbytes(cmd_apdu+5,data_len,cmd_apdu[1]))
   \                     ??t0_tpdu_12:
   \   000000A2   01FD               MOVW    R31:R30, R27:R26
   \   000000A4   8131               LDD     R19, Z+1
   \   000000A6   9615               ADIW    R27:R26, 5
   \   000000A8   ....               RCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_13:
   \   000000AA   F411               BRNE    ??t0_tpdu_1
    228                    goto error_end;
    229                  /* Get Status Word */
    230                  proc = skipProcedureNull();
    231                  res_apdu[0] = proc;
   \   000000AC   ....               RCALL   skipProcedureNull
   \   000000AE   CFD5               RJMP    ??t0_tpdu_5
    232                  res_apdu[1] = GetChar();
    233                  return 2;
    234                }else{/* is SW1 */
    235                  res_apdu[0] = proc;
    236                  res_apdu[1] = GetChar();
    237                  return 2;
    238              }
    239            }
    240          error_end:
    241            return 0;
   \                     ??t0_tpdu_1:
   \   000000B0   E000               LDI     R16, 0
   \                     ??t0_tpdu_7:
   \   000000B2   E010               LDI     R17, 0
   \                     ??t0_tpdu_2:
   \   000000B4   ....               RJMP    ?Subroutine8
    242          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   2F28               MOV     R18, R24
   \   00000002   0182               MOVW    R17:R16, R5:R4
   \   00000004   ....               RCALL   ??iso7816_getbytes
   \   00000006                      REQUIRE ?Subroutine7
   \   00000006                      ;               // Fall through to label ?Subroutine7

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   8111               LDD     R17, Z+1
   \   00000002                      REQUIRE ?Subroutine6
   \   00000002                      ;               // Fall through to label ?Subroutine6

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9510               COM     R17
   \   00000002   1701               CP      R16, R17
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   8111               LDD     R17, Z+1
   \   00000002   9513               INC     R17
   \   00000004   ....               RJMP    ?Subroutine6

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E030               LDI     R19, 0
   \   00000002   E025               LDI     R18, 5
   \                     ??Subroutine2_0:
   \   00000004   018D               MOVW    R17:R16, R27:R26
   \   00000006   ....               RCALL   ??iso7816_sendbytes
   \   00000008   ....               RJMP    ?Subroutine7

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E010               LDI     R17, 0
   \   00000002   8181               LDD     R24, Z+1
   \   00000004   E090               LDI     R25, 0
   \   00000006   9601               ADIW    R25:R24, 1
   \   00000008   1708               CP      R16, R24
   \   0000000A   0719               CPC     R17, R25
   \   0000000C   9508               RET
    243          
    244          
    245          #pragma vector=INT1_vect

   \                                 In segment CODE, align 2, keep-with-next
    246          __interrupt void INT1Handler(void)
   \                     INT1Handler:
    247          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
    248            PowerOff();
   \   00000006   9856               CBI     0x0A, 0x06
   \   00000008   9824               CBI     0x04, 0x04
   \   0000000A   B106               IN      R16, 0x06
   \   0000000C   7E03               ANDI    R16, 0xE3
   \   0000000E   B908               OUT     0x08, R16
    249            LED_OFF;
   \   00000010   982D               CBI     0x05, 0x05
    250          }
   \   00000012   BF1F               OUT     0x3F, R17
   \   00000014   9109               LD      R16, Y+
   \   00000016   9119               LD      R17, Y+
   \   00000018   9518               RETI
    251          
    252          #include <string.h>
    253          uchar GEM12_atr[22] = {0x3B,0x9F,0x95,0x80,0x1F,0xC3,0x80,0x31,0xE0,0x73,0xFE,
    254                                  0x21,0x1B,0xB3,0xE2,0x01,0x74,0x83,0x0F,0x90,0x00,0x88};
    255          uchar cmd_select_mf[] = {0xa0,0xa4,0x00,0x00,0x02,0x3f,0x00};
    256          uchar cmd_get_res[] = {0xa0,0xc0,0x00,0x00,0x16};

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    257          uchar atr[33];
   \                     atr:
   \   00000000                      DS 33

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    258          uchar ret_atr;
   \                     ret_atr:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for ret_atr>`
   \                     GEM12_atr:
   \   00000001                      DS 22
   \   00000017                      REQUIRE `?<Initializer for GEM12_atr>`
   \                     cmd_select_mf:
   \   00000017                      DS 7
   \   0000001E                      REQUIRE `?<Initializer for cmd_select_mf>`
   \                     cmd_get_res:
   \   0000001E                      DS 5
   \   00000023                      REQUIRE `?<Initializer for cmd_get_res>`
    259          

   \                                 In segment CODE, align 2, keep-with-next
    260          char test_iso7816()
   \                     test_iso7816:
    261          {
    262            char ret;
    263            iso7816_init();
   \   00000000   ....               RCALL   iso7816_init
    264            icc_reset();
   \   00000002   ....               RCALL   icc_reset
    265            ret_atr = read_atr(atr);
   \   00000004   ....               LDI     R16, LOW(atr)
   \   00000006   ....               LDI     R17, (atr) >> 8
   \   00000008   ....               RCALL   read_atr
   \   0000000A   9300....           STS     ret_atr, R16
    266            ret = memcmp(atr,GEM12_atr,22);
   \   0000000E   E146               LDI     R20, 22
   \   00000010   E050               LDI     R21, 0
   \   00000012   ....               LDI     R18, LOW((ret_atr + 1))
   \   00000014   ....               LDI     R19, (ret_atr + 1) >> 8
   \   00000016   ....               LDI     R16, LOW(atr)
   \   00000018   ....               LDI     R17, (atr) >> 8
   \   0000001A   ....               RCALL   memcmp
    267            if(ret)
   \   0000001C   2300               TST     R16
   \   0000001E   F4F1               BRNE    ??test_iso7816_0
    268              return ret;
    269            if(t0_tpdu(cmd_select_mf,7,atr) == 0)
   \   00000020   ....               LDI     R20, LOW(atr)
   \   00000022   ....               LDI     R21, (atr) >> 8
   \   00000024   E027               LDI     R18, 7
   \   00000026   E030               LDI     R19, 0
   \   00000028   ....               LDI     R16, LOW((ret_atr + 23))
   \   0000002A   ....               LDI     R17, (ret_atr + 23) >> 8
   \   0000002C   ....               RCALL   t0_tpdu
   \   0000002E   2B01               OR      R16, R17
   \   00000030   F411               BRNE    ??test_iso7816_1
    270              return (char)-1;
   \                     ??test_iso7816_2:
   \   00000032   EF0F               LDI     R16, 255
   \   00000034   9508               RET
    271            if(atr[0] != 0x9f || atr[1] != 0x16)
   \                     ??test_iso7816_1:
   \   00000036   9100....           LDS     R16, atr
   \   0000003A   390F               CPI     R16, 159
   \   0000003C   F7D1               BRNE    ??test_iso7816_2
   \   0000003E   9100....           LDS     R16, (atr + 1)
   \   00000042   3106               CPI     R16, 22
   \   00000044   F7B1               BRNE    ??test_iso7816_2
    272              return (char)-1;
    273            if(t0_tpdu(cmd_get_res,5,atr) != 0x18)
   \   00000046   ....               LDI     R20, LOW(atr)
   \   00000048   ....               LDI     R21, (atr) >> 8
   \   0000004A   E025               LDI     R18, 5
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   ....               LDI     R16, LOW((ret_atr + 30))
   \   00000050   ....               LDI     R17, (ret_atr + 30) >> 8
   \   00000052   ....               RCALL   t0_tpdu
   \   00000054   3108               CPI     R16, 24
   \   00000056   E000               LDI     R16, 0
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   F759               BRNE    ??test_iso7816_2
    274              return (char)-1;
    275            return 0;
   \                     ??test_iso7816_0:
   \   0000005C   9508               RET
    276          }

   \                                 In segment INTVEC, offset 0x4, root
   \                     `??INTVEC 4`:
   \   00000004   ....               RJMP    INT1Handler

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for OCR0Ax_FREQUENCY>`:
   \   00000000   01                 DB 1

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TIMEOUT_COUNTE>`:
   \   00000000   64                 DB 100

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TIMEOUT_COUNTL>`:
   \   00000000   60                 DB 96

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TIMEOUT_COUNTH>`:
   \   00000000   EA                 DB 234

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for RESEND_TIMES>`:
   \   00000000   02                 DB 2

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_VOLATL>`:
   \   00000000   F8                 DB 248

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_VOLATH>`:
   \   00000000   01                 DB 1

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_0P5ETUL>`:
   \   00000000   E8                 DB 232

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_0P5ETUH>`:
   \   00000000   02                 DB 2

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_1P0ETUL>`:
   \   00000000   D0                 DB 208

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for TMR1_1P0ETUH>`:
   \   00000000   05                 DB 5

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ERROR_CODE>`:
   \   00000000   01                 DB 1

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ret_atr>`:
   \   00000000   00                 DB 0
   \                     `?<Initializer for GEM12_atr>`:
   \   00000001   9F3B8095C31F       DB 59, 159, 149, 128, 31, 195, 128, 49, 224, 115, 254, 33, 27, 179, 226
   \              318073E021FE
   \              B31BE2      
   \   00000010   74010F830090       DB 1, 116, 131, 15, 144, 0, 136
   \              88          
   \                     `?<Initializer for cmd_select_mf>`:
   \   00000017   A4A000003F02       DB 160, 164, 0, 0, 2, 63, 0
   \              00          
   \                     `?<Initializer for cmd_get_res>`:
   \   0000001E   C0A0000016         DB 160, 192, 0, 0, 22

   \                                 In segment ABSOLUTE, at 0x84
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS 2

   \                                 In segment ABSOLUTE, at 0x80
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x47
   \   union <unnamed> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x45
   \   union <unnamed> volatile __io _A_TCCR0B
   \                     _A_TCCR0B:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_GPIOR0
   \                     _A_GPIOR0:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_TIFR1
   \                     _A_TIFR1:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x26
   \   union <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS 1
    277          
    278          
    279          
    280          
    281          
    282          
    283          
    284          

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     INT1Handler                2      2
     icc_reset                  0      2
       -> load_timer1_count     0      2
       -> timer1_start          0      2
       -> timer1_stop           0      2
       -> load_one_etu          0      2
     iso7816_getbytes           4      2
       -> GetChar               4      2
     iso7816_init               0      2
       -> timer1_stop           0      2
     iso7816_sendbytes          5      2
       -> skipProcedureNull     5      2
       -> SendChar              5      2
     load_timer1_count          0      2
     read_atr                   6      2
       -> GetChar               6      2
       -> GetChar               6      2
       -> ReverseByte           6      2
       -> iso7816_getbytes      6      2
       -> ReverseByte           6      2
       -> iso7816_getbytes      6      2
     skipProcedureNull          1      2
       -> GetChar               1      2
     t0_tpdu                    6      2
       -> iso7816_sendbytes     6      2
       -> iso7816_getbytes      6      2
       -> iso7816_sendbytes     6      2
       -> skipProcedureNull     6      2
       -> ReverseByte           6      2
       -> iso7816_getbytes      6      2
       -> GetChar               6      2
       -> iso7816_sendbytes     6      2
       -> skipProcedureNull     6      2
       -> ReverseByte           6      2
       -> iso7816_sendbytes     6      2
       -> skipProcedureNull     6      2
       -> GetChar               6      2
       -> GetChar               6      2
     test_iso7816               0      2
       -> iso7816_init          0      2
       -> icc_reset             0      2
       -> read_atr              0      2
       -> memcmp                0      2
       -> t0_tpdu               0      2
       -> t0_tpdu               0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     OCR0Ax_FREQUENCY                  1
     TIMEOUT_COUNTE                    1
     TIMEOUT_COUNTL                    1
     TIMEOUT_COUNTH                    1
     RESEND_TIMES                      1
     TMR1_VOLATL                       1
     TMR1_VOLATH                       1
     TMR1_0P5ETUL                      1
     TMR1_0P5ETUH                      1
     TMR1_1P0ETUL                      1
     TMR1_1P0ETUH                      1
     ERROR_CODE                        1
     ERROR_STATUS                      1
     iso7816_getbytes                 36
     iso7816_sendbytes                50
     load_timer1_count                10
     iso7816_init                     68
     icc_reset                        40
     read_atr                        160
     ?Subroutine8                      4
     ?Subroutine0                     18
     skipProcedureNull                22
     t0_tpdu                         182
     ?Subroutine5                      6
     ?Subroutine7                      4
     ?Subroutine4                      2
     ?Subroutine6                      6
     ?Subroutine3                      6
     ?Subroutine2                     10
     ?Subroutine1                     14
     INT1Handler                      26
     atr                              33
     ret_atr                          35
     test_iso7816                     94
     ??INTVEC 4                        2
     ?<Initializer for OCR0Ax_FREQUENCY>
                                       1
     ?<Initializer for TIMEOUT_COUNTE>
                                       1
     ?<Initializer for TIMEOUT_COUNTL>
                                       1
     ?<Initializer for TIMEOUT_COUNTH>
                                       1
     ?<Initializer for RESEND_TIMES>
                                       1
     ?<Initializer for TMR1_VOLATL>    1
     ?<Initializer for TMR1_VOLATH>    1
     ?<Initializer for TMR1_0P5ETUL>
                                       1
     ?<Initializer for TMR1_0P5ETUH>
                                       1
     ?<Initializer for TMR1_1P0ETUL>
                                       1
     ?<Initializer for TMR1_1P0ETUH>
                                       1
     ?<Initializer for ERROR_CODE>     1
     ?<Initializer for ret_atr>       35
     _A_TCNT1                          2
     _A_TCCR1A                         1
     _A_EICRA                          1
     _A_OCR0A                          1
     _A_TCCR0B                         1
     _A_TCCR0A                         1
     _A_GPIOR0                         1
     _A_EIMSK                          1
     _A_TIFR1                          1
     _A_DDRD                           1
     _A_PORTC                          1
     _A_DDRC                           1
     _A_PINC                           1
     _A_PORTB                          1
     _A_DDRB                           1
      Others                          12

 
  16 bytes in segment ABSOLUTE
 758 bytes in segment CODE
  12 bytes in segment INITTAB
   2 bytes in segment INTVEC
  47 bytes in segment NEAR_I
  47 bytes in segment NEAR_ID
  34 bytes in segment NEAR_Z
 
 805 bytes of CODE memory (+ 14 bytes shared)
  81 bytes of DATA memory (+ 16 bytes shared)

Errors: none
Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     30/Oct/2005  13:40:13 /
// IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version               /
// Copyright 1996-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  E:\yanglq\projects\agsm\firmware_ed11\usbdrv\usbdrv.c  /
//    Command line =  --cpu=m88 -ms -o E:\yanglq\projects\agsm\firmware_ed11 /
//                    \Release\Obj\ -D NDEBUG -lCN                           /
//                    E:\yanglq\projects\agsm\firmware_ed11\Release\List\    /
//                    -lB E:\yanglq\projects\agsm\firmware_ed11\Release\List /
//                    \ --initializers_in_flash -z9 --cross_call_passes=2    /
//                    -DENABLE_BIT_DEFINITIONS -e -I "E:\Program Files\IAR   /
//                    Systems\Embedded Workbench  Evaluation                 /
//                    version\avr\INC\" -I "E:\Program Files\IAR             /
//                    Systems\Embedded Workbench  Evaluation                 /
//                    version\avr\INC\CLIB\" --eeprom_size 512               /
//                    E:\yanglq\projects\agsm\firmware_ed11\usbdrv\usbdrv.c  /
//    List file    =  E:\yanglq\projects\agsm\firmware_ed11\Release\List\usb /
//                    drv.s90                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME usbdrv

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIMSK
        PUBWEAK _A_PINB
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC usbAckBuf
        PUBLIC usbAppBuf
        PUBLIC usbCurrentTok
        PUBLIC usbDeviceId
        PUBLIC usbInit
        PUBLIC usbInputBuf
        PUBLIC usbMsgLen
        PUBLIC usbMsgPtr
        PUBLIC usbNakBuf
        PUBLIC usbPoll
        PUBLIC usbProcessRx
        PUBLIC usbRxBuf
        PUBLIC usbRxLen
        PUBLIC usbRxToken
        PUBLIC usbTxBuf
        PUBLIC usbTxLen

        EXTERN usbFunctionWrite
        EXTERN usbFunctionRead
        EXTERN usbFunctionSetup
        EXTERN usbCrc16

// E:\yanglq\projects\agsm\firmware_ed11\usbdrv\usbdrv.c
//    1 /* Name: usbdrv.c
//    2  * Project: AVR USB driver
//    3  * Author: Christian Starkjohann
//    4  * Creation Date: 2004-12-29
//    5  * Tabsize: 4
//    6  * Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
//    7  * License: Proprietary, free under certain conditions. See Documentation.
//    8  * This Revision: $Id: usbdrv.c 53 2005-04-12 17:11:29Z cs $
//    9  */
//   10 #include <inavr.h>
//   11 #include <ioavr.h>
//   12 #include "usbdrv.h"
//   13 #include "oddebug.h"
//   14 
//   15 /*
//   16 General Description:
//   17 This module implements the C-part of the USB driver. See usbdrv.h for a
//   18 documentation of the entire driver.
//   19 */
//   20 
//   21 /* ------------------------------------------------------------------------- */
//   22 
//   23 /* raw USB registers / interface to assembler code: */
//   24 /* usbRxBuf MUST be in 1 byte addressable range (because usbInputBuf is only 1 byte) */
//   25 /* usbRxBuf can be in 2 bytes addressable range now. yanglq 2005-10-7*/
//   26 uchar	        usbRxBuf[2][USB_BUFSIZE];/* raw RX buffer: PID, 8 bytes data, 2 bytes CRC */
//   27 uchar		usbDeviceId;		/* assigned during enumeration, defaults to 0 */
//   28 unsigned char   *usbInputBuf;		/* ptr to raw buffer used for receiving */
//   29 unsigned char   *usbAppBuf;			/* ptr to raw buffer passed to app for processing */
//   30 volatile char   usbRxLen;			/* = 0; number of bytes in usbAppBuf; 0 means free */

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   31 uchar		usbCurrentTok;		/* last token received */
usbCurrentTok:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   32 uchar		usbRxToken;			/* token for data we received */
//   33 uchar		usbMsgLen = 0xff;	/* remaining number of bytes, no msg to send if -1 (see usbMsgPtr) */
//   34 volatile signed char usbTxLen = -1;	/* number of bytes to transmit with next IN token */
//   35 uchar		usbTxBuf[USB_BUFSIZE];/* data to transmit with next IN, free if usbTxLen == -1 */
usbTxBuf:
        DS 11
        REQUIRE `?<Initializer for usbTxBuf>`
usbInputBuf:
        DS 2
        REQUIRE `?<Initializer for usbInputBuf>`
usbAppBuf:
        DS 2
        REQUIRE `?<Initializer for usbAppBuf>`
//   36 #if USB_CFG_HAVE_INTRIN_ENDPOINT
//   37 /* uchar		usbRxEndp;		endpoint which was addressed (1 bit in MSB) [not impl] */
//   38 volatile char   usbTxLen1 = -1;	/* TX count for endpoint 1 */
//   39 uchar		usbTxBuf1[USB_BUFSIZE];/* TX data for endpoint 1 */
//   40 #endif
//   41 uchar		usbAckBuf[1] = {USBPID_ACK};	/* transmit buffer for ack tokens */
//   42 uchar		usbNakBuf[1] = {USBPID_NAK};	/* transmit buffer for nak tokens */
//   43 
//   44 /* USB status registers / not shared with asm code */
//   45 uchar		*usbMsgPtr;		/* data to transmit next -- ROM or RAM address */
usbMsgPtr:
        DS 2
        REQUIRE `?<Initializer for usbMsgPtr>`
usbDeviceId:
        DS 1
        REQUIRE `?<Initializer for usbDeviceId>`
usbRxLen:
        DS 1
        REQUIRE `?<Initializer for usbRxLen>`
usbRxToken:
        DS 1
        REQUIRE `?<Initializer for usbRxToken>`
usbMsgLen:
        DS 1
        REQUIRE `?<Initializer for usbMsgLen>`
usbTxLen:
        DS 1
        REQUIRE `?<Initializer for usbTxLen>`
        DS 1
        REQUIRE `?<Initializer for usbMsgFlags>`
        DS 1
        REQUIRE `?<Initializer for usbNewDeviceId>`
        DS 1
        REQUIRE `?<Initializer for usbIsReset>`
usbRxBuf:
        DS 22
        REQUIRE `?<Initializer for usbRxBuf>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
usbAckBuf:
        DS 1
        REQUIRE `?<Initializer for usbAckBuf>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
usbNakBuf:
        DS 1
        REQUIRE `?<Initializer for usbNakBuf>`
//   46 static uchar	usbMsgFlags;	/* flag values see below */
//   47 static uchar	usbNewDeviceId;	/* = 0; device ID which should be set after status phase */
//   48 static uchar	usbIsReset;		/* = 0; USB bus is in reset phase */
//   49 
//   50 #define	USB_FLG_TX_PACKET		(1<<0)
//   51 /* Leave free 6 bits after TX_PACKET. This way we can increment usbMsgFlags to toggle TX_PACKET */
//   52 #define	USB_FLG_MSGPTR_IS_ROM	(1<<6)
//   53 #define	USB_FLG_USE_DEFAULT_RW	(1<<7)
//   54 
//   55 /*
//   56 optimizing hints:
//   57 - do not post/pre inc/dec integer values in operations
//   58 - assign value of PRG_RDB() to register variables and don't use side effects in arg
//   59 - use narrow scope for variables which should be in X/Y/Z register
//   60 - assign char sized expressions to variables to force 8 bit arithmetics
//   61 */
//   62 
//   63 /* ------------------------------------------------------------------------- */
//   64 

        RSEG NEAR_F:CODE:NOROOT(0)
//   65 __flash static char usbDescrDevice[] = {	/* USB device descriptor */
??usbDescrDevice:
        DB 18, 1, 1, 1, 255, 0, 0, 8, 158, 10, 17, 237, 0, 1, 1, 2, 0, 1
        DB 9, 2, 18, 0, 1, 1, 0, 128, 25, 9, 4, 0, 0, 0, 0, 0, 0, 0
        DB 4, 3, 9, 4
        DW 792, 97, 103, 115, 109, 46, 115, 102, 46, 110, 101, 116
        DW 812, 85, 83, 66, 32, 83, 109, 97, 114, 116, 32, 67, 97, 114, 100, 32
        DW 82, 101, 97, 100, 101, 114
//   66 	18,			/* sizeof(usbDescrDevice): length of descriptor in bytes */
//   67 	1,			/* descriptor type */
//   68 	0x01, 0x01,	/* USB version supported */
//   69 	USB_CFG_DEVICE_CLASS,
//   70 	USB_CFG_DEVICE_SUBCLASS,
//   71 	0,			/* protocol */
//   72 	8,			/* max packet size */
//   73 	USB_CFG_VENDOR_ID,	/* 2 bytes */
//   74 	USB_CFG_DEVICE_ID,	/* 2 bytes */
//   75 	USB_CFG_DEVICE_VERSION,	/* 2 bytes */
//   76 #if USB_CFG_VENDOR_NAME_LEN
//   77 	1,			/* manufacturer string index */
//   78 #else
//   79 	0,			/* manufacturer string index */
//   80 #endif
//   81 #if USB_CFG_DEVICE_NAME_LEN
//   82 	2,			/* product string index */
//   83 #else
//   84 	0,			/* product string index */
//   85 #endif
//   86 	0,			/* serial number string index */
//   87 	1,			/* number of configurations */
//   88 };
//   89 
//   90 __flash static char usbDescrConfig[] = {	/* USB configuration descriptor */
//   91 	9,			/* sizeof(usbDescrConfig): length of descriptor in bytes */
//   92 	2,			/* descriptor type */
//   93 	(18 + 7 * USB_CFG_HAVE_INTRIN_ENDPOINT), 0,	/* total length of data returned (including inlined descriptors) */
//   94 	1,			/* number of interfaces in this configuration */
//   95 	1,			/* index of this configuration */
//   96 	0,			/* configuration name string index */
//   97 #if USB_CFG_IS_SELF_POWERED
//   98 	USBATTR_SELFPOWER,	/* attributes */
//   99 #else
//  100 	USBATTR_BUSPOWER,	/* attributes */
//  101 #endif
//  102 	USB_CFG_MAX_BUS_POWER/2,			/* max USB current in 2mA units */
//  103 /* interface descriptor follows inline: */
//  104 	9,			/* sizeof(usbDescrInterface): length of descriptor in bytes */
//  105 	4,			/* descriptor type */
//  106 	0,			/* index of this interface */
//  107 	0,			/* alternate setting for this interface */
//  108 	USB_CFG_HAVE_INTRIN_ENDPOINT,	/* endpoints excl 0: number of endpoint descriptors to follow */
//  109 	USB_CFG_INTERFACE_CLASS,
//  110 	USB_CFG_INTERFACE_SUBCLASS,
//  111 	USB_CFG_INTERFACE_PROTOCOL,
//  112 	0,			/* string index for interface */
//  113 #if USB_CFG_HAVE_INTRIN_ENDPOINT	/* endpoint descriptor for endpoint 1 */
//  114 	7,			/* sizeof(usbDescrEndpoint) */
//  115 	5,			/* descriptor type = endpoint */
//  116 	0x81,		/* IN endpoint number 1 */
//  117 	0x03,		/* attrib: Interrupt endpoint */
//  118 	8, 0,		/* maximum packet size */
//  119 	USB_CFG_INTR_POLL_INTERVAL,	/* in ms */
//  120 #endif
//  121 };
//  122 
//  123 __flash static char usbDescrString0[] = {	/* language descriptor */
//  124 	4,			/* sizeof(usbDescrString0): length of descriptor in bytes */
//  125 	3,			/* descriptor type */
//  126 	0x09, 0x04,	/* language index (0x0409 = US-English) */
//  127 };
//  128 
//  129 #if USB_CFG_VENDOR_NAME_LEN
//  130 __flash static int usbDescrString1[] = {
//  131 	(2 * USB_CFG_VENDOR_NAME_LEN + 2) | (3<<8),	/* length of descriptor in bytes | descriptor type */
//  132 	USB_CFG_VENDOR_NAME
//  133 };
//  134 #endif
//  135 #if USB_CFG_DEVICE_NAME_LEN
//  136 __flash static int usbDescrString2[] = {
//  137 	(2 * USB_CFG_DEVICE_NAME_LEN + 2) | (3<<8),	/* length of descriptor in bytes | descriptor type */
//  138 	USB_CFG_DEVICE_NAME
//  139 };
//  140 #endif
//  141 
//  142 /* We don't use prog_int or prog_int16_t for compatibility with various libc
//  143  * versions. Here's an other compatibility hack:
//  144  */
//  145 #ifndef PRG_RDB
//  146 #define	PRG_RDB(addr)	__load_program_memory((unsigned char __flash *)addr)
//  147 #endif
//  148 
//  149 typedef union{
//  150 	unsigned	word;
//  151 	uchar		*ptr;
//  152 	uchar		bytes[2];
//  153 }converter_t;
//  154 /* We use this union to do type conversions. This is better optimized than
//  155  * type casts in gcc 3.4.3 and much better than using bit shifts to build
//  156  * ints from chars. Byte ordering is not a problem on an 8 bit platform.
//  157  */
//  158 
//  159 /* ------------------------------------------------------------------------- */
//  160 
//  161 #if USB_CFG_HAVE_INTRIN_ENDPOINT
//  162 static uchar	usbTxPacketCnt1;
//  163 
//  164 void	usbSetInterrupt(uchar *data, uchar len)
//  165 {
//  166 uchar		*p, i;
//  167 converter_t	crc;
//  168 
//  169 	if(len > 7)
//  170 		len = 7;
//  171 	i = USBPID_DATA1;
//  172 	if(usbTxPacketCnt1 & 1)
//  173 		i = USBPID_DATA0;
//  174 	if(usbTxLen1 < 0){		/* packet buffer was empty */
//  175 		usbTxPacketCnt1++;
//  176 	}else{
//  177 		usbTxLen1 = -1;		/* avoid sending incomplete interrupt data */
//  178 	}
//  179 	p = usbTxBuf1;
//  180 	*p++ = i;
//  181 	for(i=len;i--;)
//  182 		*p++ = *data++;
//  183 	crc.word = usbCrc16(&usbTxBuf1[1], len);
//  184 	usbTxBuf1[len + 1] = crc.bytes[0];
//  185 	usbTxBuf1[len + 2] = crc.bytes[1];
//  186 	usbTxLen1 = len + 4;	/* len must be given including sync byte */
//  187 }
//  188 #endif
//  189 

        RSEG CODE:CODE:NOROOT(1)
//  190 static void	usbWrite(uchar *data, uchar len)
??usbWrite:
//  191 {
        RCALL	?PROLOGUE4_L09
//  192 #if USB_CFG_IMPLEMENT_FN_WRITE
//  193 	if(!(usbMsgFlags & USB_FLG_USE_DEFAULT_RW)){
        LDI	R26, LOW(usbTxBuf)
        LDI	R27, (usbTxBuf) >> 8
        ADIW	R27:R26, 22
        LD	R19, X
        SBIW	R27:R26, 22
        SBRC	R19, 7
        RJMP	??usbWrite_1
//  194 		if(usbFunctionWrite(data, len) == 0xff){	/* an error occurred */
        RCALL	usbFunctionWrite
        CPI	R16, 255
        BRNE	??usbWrite_1
//  195 			/* usbMsgLen = 0xff; cancel potentially pending ACK [has been done by ASM module when OUT token arrived] */
//  196 			usbTxBuf[0] = USBPID_STALL;
        LDI	R16, 30
        ST	X, R16
//  197 			usbTxLen = 2;		/* length including sync byte */
        LDI	R16, 2
        ADIW	R27:R26, 21
        RJMP	??usbWrite_2
//  198 			return;
//  199 		}
//  200 	}
//  201 #endif
//  202 	usbMsgLen = 0;		/* send zero-sized block as ACK */
??usbWrite_1:
        LDI	R16, 0
        ADIW	R27:R26, 20
        ST	X, R16
        ADIW	R27:R26, 2
//  203 	usbMsgFlags = 0;	/* start with a DATA1 package */
??usbWrite_2:
        ST	X, R16
//  204 }
        RJMP	?Subroutine0
//  205 

        RSEG CODE:CODE:NOROOT(1)
//  206 static uchar	usbRead(uchar *data, uchar len)
??usbRead:
//  207 {
        RCALL	?PROLOGUE4_L09
//  208 #if USB_CFG_IMPLEMENT_FN_READ
//  209 	if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
        LDI	R26, LOW(usbTxBuf)
        LDI	R27, (usbTxBuf) >> 8
        MOVW	R31:R30, R27:R26
        LDD	R19, Z+22
        SBRS	R19, 7
        RJMP	??usbRead_1
//  210 #endif
//  211 		uchar i = len, *r = usbMsgPtr;
        MOV	R20, R18
        LDD	R24, Z+15
        LDD	R25, Z+16
//  212 		if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){	/* ROM data */
        SBRS	R19, 6
        RJMP	??usbRead_2
//  213 			while(i--){
??usbRead_3:
        MOV	R19, R20
        DEC	R20
        TST	R19
        BREQ	??usbRead_4
//  214 				char c = PRG_RDB(r);	/* assign to char size variable to enforce byte ops */
//  215 				*data++ = c;
        MOVW	R31:R30, R25:R24
        LPM	R0, Z
        MOVW	R31:R30, R17:R16
        ST	Z+, R0
        MOVW	R17:R16, R31:R30
//  216 				r++;
        ADIW	R25:R24, 1
        RJMP	??usbRead_3
//  217 			}
//  218 		}else{					/* RAM data */
//  219 			while(i--)
//  220 				*data++ = *r++;
??usbRead_5:
        MOVW	R31:R30, R25:R24
        LD	R19, Z+
        MOVW	R25:R24, R31:R30
        MOVW	R31:R30, R17:R16
        ST	Z+, R19
        MOVW	R17:R16, R31:R30
??usbRead_2:
        MOV	R19, R20
        DEC	R20
        TST	R19
        BRNE	??usbRead_5
//  221 		}
//  222 		usbMsgPtr = r;
??usbRead_4:
        MOVW	R31:R30, R27:R26
        STD	Z+15, R24
        STD	Z+16, R25
//  223 		return len;
        MOV	R16, R18
        RJMP	??usbRead_6
//  224 #if USB_CFG_IMPLEMENT_FN_READ
//  225 	}else{
//  226 		if(len != 0)	/* don't bother app with 0 sized reads */
??usbRead_1:
        TST	R18
        BREQ	??usbRead_7
//  227 			return usbFunctionRead(data, len);
        RCALL	usbFunctionRead
        RJMP	??usbRead_6
//  228 		return 0;
??usbRead_7:
        LDI	R16, 0
??usbRead_6:
        RJMP	?Subroutine0
//  229 	}
//  230 #endif
//  231 }
//  232 
//  233 /* Don't make this function static to avoid inlining.
//  234  * The entire function would become too large and exceed the range of
//  235  * relative jumps.
//  236  */

        RSEG CODE:CODE:NOROOT(1)
//  237 void	usbProcessRx(uchar *data, uchar len)
usbProcessRx:
//  238 {
        RCALL	?PROLOGUE4_L09
        MOVW	R21:R20, R17:R16
//  239 /* We use if() cascades because the compare is done byte-wise while switch()
//  240  * is int-based. The if() cascades are therefore more efficient.
//  241  */
//  242 	DBG2(0x10 + (usbRxToken == (uchar)USBPID_SETUP), data, len);
//  243 	if(usbRxToken == (uchar)USBPID_SETUP){
        LDI	R26, LOW(usbTxBuf)
        LDI	R27, (usbTxBuf) >> 8
        MOVW	R31:R30, R27:R26
        LDD	R16, Z+19
        CPI	R16, 45
        BREQ	$+2+2
        RJMP	??usbProcessRx_0
//  244 		uchar replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
        LDI	R24, 0
        LDI	R25, 128
//  245 		if(len == 8){	/* Setup size must be always 8 bytes. Ignore otherwise. */
        CPI	R18, 8
        BREQ	$+2+2
        RJMP	??usbProcessRx_1
//  246 			uchar type = data[0] & (3 << 5);
//  247 			if(type == (USBRQ_TYPE_STANDARD << 5)){
        MOVW	R31:R30, R21:R20
        LD	R16, Z
        ANDI	R16, 0x60
        BREQ	$+2+2
        RJMP	??usbProcessRx_2
//  248 				uchar *replyData = usbTxBuf + 9; /* there is 3 bytes free space at the end of the buffer */
        MOVW	R17:R16, R27:R26
        SUBI	R16, 247
        SBCI	R17, 255
//  249 				replyData[0] = 0;
        MOVW	R31:R30, R27:R26
        STD	Z+9, R24
//  250 				if(data[1] == 0){/* GET_STATUS */
        MOVW	R31:R30, R21:R20
        LDD	R18, Z+1
        TST	R18
        BRNE	??usbProcessRx_3
//  251 #if USB_CFG_IS_SELF_POWERED
//  252 					uchar recipient = data[0] & 0x1f;	/* assign arith ops to variables to enforce byte size */
//  253 					if(recipient == USBRQ_RCPT_DEVICE)
//  254 						replyData[0] =  USB_CFG_IS_SELF_POWERED;
//  255 #endif
//  256 					replyData[1] = 0;
        MOVW	R31:R30, R27:R26
        STD	Z+10, R24
//  257 					replyLen = 2;
        LDI	R24, 2
        RJMP	??usbProcessRx_4
//  258 				}else if(data[1] == 5){		/* SET_ADDRESS */
??usbProcessRx_3:
        CPI	R18, 5
        BRNE	??usbProcessRx_5
//  259 					usbNewDeviceId = data[2];
        LDD	R18, Z+2
        MOVW	R31:R30, R27:R26
        STD	Z+23, R18
        RJMP	??usbProcessRx_4
//  260 				}else if(data[1] == 6){		/* GET_DESCRIPTOR */
??usbProcessRx_5:
        CPI	R18, 6
        BRNE	??usbProcessRx_6
//  261 					flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
        LDI	R25, 192
//  262 					if(data[3] == 1){		/* descriptor type requested */
        LDD	R18, Z+3
        CPI	R18, 1
        BRNE	??usbProcessRx_7
//  263 						replyLen = sizeof(usbDescrDevice);
        LDI	R24, 18
//  264 						replyData = (uchar *)usbDescrDevice;
        LDI	R16, LOW(??usbDescrDevice)
        LDI	R17, (??usbDescrDevice) >> 8
        RJMP	??usbProcessRx_4
//  265 					}else if(data[3] == 2){
??usbProcessRx_7:
        CPI	R18, 2
        BRNE	??usbProcessRx_8
//  266 						replyLen = sizeof(usbDescrConfig);
        LDI	R24, 18
//  267 						replyData = (uchar *)usbDescrConfig;
        LDI	R16, LOW((??usbDescrDevice + 18))
        LDI	R17, (??usbDescrDevice + 18) >> 8
        RJMP	??usbProcessRx_4
//  268 					}else if(data[3] == 3){	/* string descriptor */
??usbProcessRx_8:
        CPI	R18, 3
        BRNE	??usbProcessRx_4
//  269 						if(data[2] == 0){	/* descriptor index */
        LDD	R18, Z+2
        TST	R18
        BRNE	??usbProcessRx_9
//  270 							replyLen = sizeof(usbDescrString0);
        LDI	R24, 4
//  271 							replyData = (uchar *)usbDescrString0;
        LDI	R16, LOW((??usbDescrDevice + 36))
        LDI	R17, (??usbDescrDevice + 36) >> 8
        RJMP	??usbProcessRx_4
//  272 #if USB_CFG_VENDOR_NAME_LEN
//  273 						}else if(data[2] == 1){
??usbProcessRx_9:
        CPI	R18, 1
        BRNE	??usbProcessRx_10
//  274 							replyLen = sizeof(usbDescrString1);
        LDI	R24, 24
//  275 							replyData = (uchar *)usbDescrString1;
        LDI	R16, LOW((??usbDescrDevice + 40))
        LDI	R17, (??usbDescrDevice + 40) >> 8
        RJMP	??usbProcessRx_4
//  276 #endif
//  277 #if USB_CFG_DEVICE_NAME_LEN
//  278 						}else if(data[2] == 2){
??usbProcessRx_10:
        CPI	R18, 2
        BRNE	??usbProcessRx_4
//  279 							replyLen = sizeof(usbDescrString2);
        LDI	R24, 44
//  280 							replyData = (uchar *)usbDescrString2;
        LDI	R16, LOW((??usbDescrDevice + 64))
        LDI	R17, (??usbDescrDevice + 64) >> 8
        RJMP	??usbProcessRx_4
//  281 #endif
//  282 						}
//  283 					}
//  284 				}else if(data[1] == 8){		/* GET_CONFIGURATION */
??usbProcessRx_6:
        CPI	R18, 8
        BRNE	??usbProcessRx_11
//  285 					replyLen = 1;
        LDI	R24, 1
//  286 					replyData[0] = 1;	/* config is always 1, no setConfig required */
        MOVW	R31:R30, R27:R26
        STD	Z+9, R24
        RJMP	??usbProcessRx_4
//  287 				}else if(data[1] == 10){	/* GET_INTERFACE */
??usbProcessRx_11:
        CPI	R18, 10
        BRNE	??usbProcessRx_4
//  288 					replyLen = 1;
        LDI	R24, 1
//  289 #if USB_CFG_HAVE_INTRIN_ENDPOINT
//  290 				}else if(data[1] == 11){	/* SET_INTERFACE */
//  291 					usbTxPacketCnt1 = 0;	/* reset data toggling for interrupt socket */
//  292 #endif
//  293 				}else{
//  294 					/* the following requests can be ignored, send default reply */
//  295 					/* 1: CLEAR_FEATURE, 3: SET_FEATURE, 7: SET_DESCRIPTOR */
//  296 					/* 9: SET_CONFIGURATION, 11: SET_INTERFACE, 12: SYNCH_FRAME */
//  297 				}
//  298 				usbMsgPtr = replyData;
??usbProcessRx_4:
        MOVW	R31:R30, R27:R26
        STD	Z+15, R16
        STD	Z+16, R17
//  299 				if(!data[7] && replyLen > data[6])	/* max length is in data[7]:data[6] */
        MOVW	R31:R30, R21:R20
        LDD	R16, Z+7
        TST	R16
        BRNE	??usbProcessRx_1
        LDD	R16, Z+6
        CP	R16, R24
        BRCC	??usbProcessRx_1
//  300 					replyLen = data[6];
??usbProcessRx_12:
        MOV	R24, R16
        RJMP	??usbProcessRx_1
//  301 			}else{	/* not a standard request -- must be vendor or class request */
//  302 #if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
//  303 				uchar	len;
//  304 				replyLen = data[6];	/* if this is an OUT operation, the next token will reset usbMsgLen */
??usbProcessRx_2:
        LDD	R24, Z+6
//  305 				if((len = usbFunctionSetup(data)) != 0xff){
        MOVW	R17:R16, R21:R20
        RCALL	usbFunctionSetup
        CPI	R16, 255
        BRNE	??usbProcessRx_12
//  306 					replyLen = len;
//  307 				}else{
//  308 					flags = 0;	/* we have no valid msg, use read/write functions */
        LDI	R25, 0
//  309 				}
//  310 #else
//  311 				replyLen = usbFunctionSetup(data);
//  312 #endif
//  313 			}
//  314 		}
//  315 		usbMsgLen = replyLen;
??usbProcessRx_1:
        MOVW	R31:R30, R27:R26
        STD	Z+20, R24
//  316 		usbMsgFlags = flags;
        STD	Z+22, R25
        RJMP	??usbProcessRx_13
//  317 	}else{	/* out request */
//  318 		usbWrite(data, len);
??usbProcessRx_0:
        MOVW	R17:R16, R21:R20
        RCALL	??usbWrite
//  319 	}
//  320 }
??usbProcessRx_13:
        REQUIRE ?Subroutine0
        ;		// Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        LDI	R30, 4
        RJMP	?EPILOGUE_B4_L09
//  321 
//  322 /* ------------------------------------------------------------------------- */
//  323 

        RSEG CODE:CODE:NOROOT(1)
//  324 static void	usbBuildTxBlock(void)
??usbBuildTxBlock:
//  325 {
        RCALL	?PROLOGUE4_L09
        SBIW	R29:R28, 2
//  326 uchar		wantLen, len, txLen, x;
//  327 converter_t	crc;
//  328 
//  329 	x = USBPID_DATA1;
        LDI	R16, 75
//  330 	if(usbMsgFlags & USB_FLG_TX_PACKET)
        LDI	R26, LOW(usbTxBuf)
        LDI	R27, (usbTxBuf) >> 8
        MOVW	R31:R30, R27:R26
        LDD	R17, Z+22
        SBRC	R17, 0
//  331 		x = USBPID_DATA0;
        LDI	R16, 195
//  332 	usbMsgFlags++;
??usbBuildTxBlock_1:
        INC	R17
        STD	Z+22, R17
//  333 	usbTxBuf[0] = x;
        ST	X, R16
//  334 	wantLen = usbMsgLen;
        LDD	R18, Z+20
//  335 	if(wantLen > 8)
        CPI	R18, 9
        BRCS	??usbBuildTxBlock_2
//  336 		wantLen = 8;
        LDI	R18, 8
//  337 	usbMsgLen -= wantLen;
??usbBuildTxBlock_2:
        LDD	R16, Z+20
        SUB	R16, R18
        STD	Z+20, R16
//  338 	len = usbRead(usbTxBuf + 1, wantLen);
        MOVW	R17:R16, R27:R26
        SUBI	R16, 255
        SBCI	R17, 255
        RCALL	??usbRead
        MOV	R24, R16
//  339 	if(len <= 8){	/* valid data packet */
        CPI	R16, 9
        BRCC	??usbBuildTxBlock_3
//  340 		crc.word = usbCrc16(&usbTxBuf[1], len);
        MOV	R20, R16
        MOVW	R17:R16, R27:R26
        SUBI	R16, 255
        SBCI	R17, 255
        RCALL	usbCrc16
        ST	Y, R16
        STD	Y+1, R17
//  341 		usbTxBuf[len + 1] = crc.bytes[0];
        LDI	R25, 0
        MOVW	R31:R30, R27:R26
        ADD	R30, R24
        ADC	R31, R25
        STD	Z+1, R16
//  342 		usbTxBuf[len + 2] = crc.bytes[1];
        LDD	R18, Y+1
        STD	Z+2, R18
//  343 		txLen = len + 4;	/* length including sync byte */
        MOV	R16, R24
        SUBI	R16, 252
//  344 		if(len < 8)		/* a partial package identifies end of message */
        CPI	R24, 8
        BRCC	??usbBuildTxBlock_4
//  345 			usbMsgLen = 0xff;
??usbBuildTxBlock_5:
        LDI	R17, 255
        MOVW	R31:R30, R27:R26
        STD	Z+20, R17
//  346 	}else{
//  347 		usbTxBuf[0] = USBPID_STALL;
//  348 		txLen = 2;	/* length including sync byte */
//  349 		usbMsgLen = 0xff;
//  350 	}
//  351 	usbTxLen = txLen;
??usbBuildTxBlock_4:
        MOVW	R31:R30, R27:R26
        STD	Z+21, R16
//  352 	DBG2(0x20, usbTxBuf, txLen-1);
//  353 }
        ADIW	R29:R28, 2
        RJMP	?Subroutine0
??usbBuildTxBlock_3:
        LDI	R16, 30
        ST	X, R16
        LDI	R16, 2
        RJMP	??usbBuildTxBlock_5
//  354 
//  355 static inline uchar	isNotSE0(void)
//  356 {
//  357 uchar	rval;
//  358 /* We want to do
//  359  *     return (USBIN & USBMASK);
//  360  * here, but the compiler does int-expansion acrobatics.
//  361  * We can avoid this by assigning to a char-sized variable.
//  362  */
//  363 	rval = USBIN & USBMASK;
//  364 	return rval;
//  365 }
//  366 
//  367 /* ------------------------------------------------------------------------- */
//  368 

        RSEG CODE:CODE:NOROOT(1)
//  369 void	usbPoll(void)
usbPoll:
//  370 {
        RCALL	?PROLOGUE4_L09
//  371 uchar	len;
//  372 	if((len = usbRxLen) > 0){
        LDI	R26, LOW(usbTxBuf)
        LDI	R27, (usbTxBuf) >> 8
        ADIW	R27:R26, 18
        LD	R16, X
        SBIW	R27:R26, 18
        MOV	R18, R16
        TST	R16
        BREQ	??usbPoll_0
//  373 /* We could check CRC16 here -- but ACK has already been sent anyway. If you
//  374  * need data integrity checks with this driver, check the CRC in your app
//  375  * code and report errors back to the host. Since the ACK was already sent,
//  376  * retries must be handled on application level.
//  377  * unsigned crc = usbCrc16((uchar *)(unsigned)(usbAppBuf + 1), usbRxLen - 3);
//  378  */
//  379 		len -= 3;	/* remove PID and CRC */
        SUBI	R18, 3
//  380 		if(len < 128){
        CPI	R18, 128
        BRCC	??usbPoll_1
//  381 			usbProcessRx((uchar *)(unsigned)(usbAppBuf + 1), len);
        ADIW	R27:R26, 13
        LD	R16, X+
        LD	R17, X
        SBIW	R27:R26, 14
        SUBI	R16, 255
        SBCI	R17, 255
        RCALL	usbProcessRx
//  382 		}
//  383 		usbRxLen = 0;	/* mark rx buffer as available */
??usbPoll_1:
        LDI	R16, 0
        ADIW	R27:R26, 18
        ST	X, R16
        SBIW	R27:R26, 18
//  384 	}
//  385 	if(usbTxLen < 0){	/* TX system is idle */
??usbPoll_0:
        ADIW	R27:R26, 21
        LD	R16, X
        SBIW	R27:R26, 21
        TST	R16
        BRPL	??usbPoll_2
//  386 		if(usbMsgLen != 0xff){
        ADIW	R27:R26, 20
        LD	R16, X
        SBIW	R27:R26, 20
        CPI	R16, 255
        BREQ	??usbPoll_3
//  387 			usbBuildTxBlock();
        RCALL	??usbBuildTxBlock
        RJMP	??usbPoll_2
//  388 		}else if(usbNewDeviceId){
??usbPoll_3:
        ADIW	R27:R26, 23
        LD	R16, X
        SBIW	R27:R26, 23
        TST	R16
        BREQ	??usbPoll_2
//  389 			usbDeviceId = usbNewDeviceId;
        ADIW	R27:R26, 17
        ST	X, R16
        ADIW	R27:R26, 6
//  390 			DBG1(1, &usbNewDeviceId, 1);
//  391 			usbNewDeviceId = 0;
        LDI	R16, 0
        ST	X, R16
        SBIW	R27:R26, 23
//  392 		}
//  393 	}
//  394 	if(isNotSE0()){	/* SE0 state */
??usbPoll_2:
        IN	R16, 0x03
        ANDI	R16, 0x03
        BREQ	??usbPoll_4
//  395 		usbIsReset = 0;
        LDI	R16, 0
        ADIW	R27:R26, 24
        RJMP	??usbPoll_5
//  396 	}else{
//  397 		/* check whether SE0 lasts for more than 2.5us (3.75 bit times) */
//  398 		if(!usbIsReset){
??usbPoll_4:
        ADIW	R27:R26, 24
        LD	R16, X
        SBIW	R27:R26, 24
        TST	R16
        BRNE	??usbPoll_6
//  399 			uchar i;
//  400 			for(i=100;i;i--){
        LDI	R16, 100
//  401 				if(isNotSE0())
??usbPoll_7:
        IN	R17, 0x03
        ANDI	R17, 0x03
        BRNE	??usbPoll_6
//  402 					goto notUsbReset;
//  403 			}
        DEC	R16
        BRNE	??usbPoll_7
//  404 			usbIsReset = 1;
        LDI	R16, 1
        ADIW	R27:R26, 24
        ST	X, R16
        SBIW	R27:R26, 7
//  405 			usbDeviceId = 0;
        LDI	R16, 0
        ST	X, R16
        ADIW	R27:R26, 6
//  406 			usbNewDeviceId = 0;
??usbPoll_5:
        ST	X, R16
//  407 			DBG1(0xff, 0, 0);
//  408 notUsbReset:;
//  409 		}
//  410 	}
//  411 }
??usbPoll_6:
        RJMP	?Subroutine0
//  412 
//  413 /* ------------------------------------------------------------------------- */
//  414 

        RSEG CODE:CODE:NOROOT(1)
//  415 void	usbInit(void)
usbInit:
//  416 {
//  417 	usbInputBuf = usbRxBuf[0];
        LDI	R30, LOW(usbTxBuf)
        LDI	R31, (usbTxBuf) >> 8
        MOVW	R17:R16, R31:R30
        SUBI	R16, 231
        SBCI	R17, 255
        STD	Z+11, R16
        STD	Z+12, R17
//  418 	usbAppBuf = usbRxBuf[1];
        MOVW	R17:R16, R31:R30
        SUBI	R16, 220
        SBCI	R17, 255
        STD	Z+13, R16
        STD	Z+14, R17
//  419 #if USB_INTR_CFG_SET != 0
//  420 	USB_INTR_CFG |= USB_INTR_CFG_SET;
        LDS	R16, 105
        ORI	R16, 0x03
        STS	105, R16
//  421 #endif
//  422 #if USB_INTR_CFG_CLR != 0
//  423 	USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
//  424 #endif
//  425 	USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
        SBI	0x1D, 0x00
//  426 }
        RET

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for usbTxBuf>`:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for usbInputBuf>`:
        DB 0, 0
`?<Initializer for usbAppBuf>`:
        DB 0, 0
`?<Initializer for usbMsgPtr>`:
        DB 0, 0
`?<Initializer for usbDeviceId>`:
        DB 0
`?<Initializer for usbRxLen>`:
        DB 0
`?<Initializer for usbRxToken>`:
        DB 0
`?<Initializer for usbMsgLen>`:
        DB 255
`?<Initializer for usbTxLen>`:
        DB 255
`?<Initializer for usbMsgFlags>`:
        DB 0
`?<Initializer for usbNewDeviceId>`:
        DB 0
`?<Initializer for usbIsReset>`:
        DB 0
`?<Initializer for usbRxBuf>`:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DW	SFE(NEAR_I) - SFB(NEAR_I)
        DW	SFB(NEAR_I)
        DW	SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DW	SFE(NEAR_Z) - SFB(NEAR_Z)
        DW	SFB(NEAR_Z)
        DW	0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for usbAckBuf>`:
        DB 210

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for usbNakBuf>`:
        DB 90

        ASEGN ABSOLUTE:DATA:NOROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        END
//  427 
//  428 /* ------------------------------------------------------------------------- */
// 
//   3 bytes in segment ABSOLUTE
// 644 bytes in segment CODE
//  12 bytes in segment INITTAB
// 108 bytes in segment NEAR_F
//  49 bytes in segment NEAR_I
//  49 bytes in segment NEAR_ID
//   1 byte  in segment NEAR_Z
// 
// 801 bytes of CODE memory (+ 12 bytes shared)
//  50 bytes of DATA memory (+  3 bytes shared)
//
//Errors: none
//Warnings: none

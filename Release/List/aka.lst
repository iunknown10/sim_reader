##############################################################################
#                                                                            #
#                                                      30/Oct/2005  13:40:05 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\aka.c    #
#    Command line =  --cpu=m88 -ms -o E:\yanglq\projects\agsm\firmware_ed11\ #
#                    Release\Obj\ -D NDEBUG -lCN                             #
#                    E:\yanglq\projects\agsm\firmware_ed11\Release\List\     #
#                    -lB E:\yanglq\projects\agsm\firmware_ed11\Release\List\ #
#                     --initializers_in_flash -z9 --cross_call_passes=2      #
#                    -DENABLE_BIT_DEFINITIONS -e -I "E:\Program Files\IAR    #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\" -I "E:\Program Files\IAR              #
#                    Systems\Embedded Workbench  Evaluation                  #
#                    version\avr\INC\CLIB\" --eeprom_size 512                #
#                    E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\aka.c    #
#    List file    =  E:\yanglq\projects\agsm\firmware_ed11\Release\List\aka. #
#                    lst                                                     #
#    Object file  =  E:\yanglq\projects\agsm\firmware_ed11\Release\Obj\aka.r #
#                    90                                                      #
#                                                                            #
#                                                                            #
##############################################################################

E:\yanglq\projects\agsm\firmware_ed11\3gpp-aka\aka.c
      1          /* aka.c:  sha based function for aka */
      2          
      3          #include <string.h>
      4          #include "aka.h"
      5          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          static uchar counter[8]={0};
   \                     ??counter:
   \   00000000                      DS 8
      7          

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      8          static uchar G[20] = {  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      9          						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     10          						0x00, 0x00, 0x00, 0x2d};
     11          static uchar A[20] = {  0x9d, 0xe9, 0xc9, 0xc8, 0xef, 0xd5, 0x78, 0x11,
     12          						0x48, 0x23, 0x14, 0x01, 0x90, 0x1f, 0x2d, 0x49,
     13          						0x3f, 0x4c, 0x63, 0x65};
     14          static uchar B[20] = {  0x75, 0xef, 0xd1, 0x5c, 0x4b, 0x8f, 0x8f, 0x51,
   \                     ??B:
   \   00000000                      DS 20
   \   00000014                      REQUIRE `?<Initializer for B>`
   \   00000014                      DS 20
   \   00000028                      REQUIRE `?<Initializer for G>`
   \   00000028                      DS 20
   \   0000003C                      REQUIRE `?<Initializer for A>`
     15          						0x4e, 0xf3, 0xbc, 0xc3, 0x79, 0x4a, 0x76, 0x5e,
     16          						0x7e, 0xec, 0x45, 0xe0};
     17          static
     18          void modred(uchar *z,int shift,uchar *base);
     19          
     20          /* This function performs the operation of (A*X+B) mod 2^160+2^5+2^3+2^2+1
     21           *
     22           *
     23          */
     24          

   \                                 In segment CODE, align 2, keep-with-next
     25          void whiten(uchar xx[])
   \                     whiten:
     26          {
   \   00000000   ....               RCALL   ?PROLOGUE6_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   97A8               SBIW    R29:R28, 40
   \   00000004   0128               MOVW    R5:R4, R17:R16
     27          	uchar z[40];
     28          	int i, j;
     29          
     30          	/* calculate A * X in polynomial form */
     31          	for (i=0;i<40;i++)
   \   00000006   ....               RCALL   ?Subroutine5
     32          		z[i]=0;
   \                     ??CrossCallReturnLabel_0:
   \   00000008   E000               LDI     R16, 0
   \   0000000A   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_24:
   \   0000000C   8300               ST      Z, R16
   \   0000000E   9601               ADIW    R25:R24, 1
   \   00000010   3288               CPI     R24, 40
   \   00000012   0790               CPC     R25, R16
   \   00000014   F3CC               BRLT    ??CrossCallReturnLabel_0
     33          
     34          	for (i=0;i<20;i++)
   \   00000016   ....               RCALL   ?Subroutine5
     35          	{
     36          		for (j=0;j<8;j++)
   \                     ??CrossCallReturnLabel_1:
   \   00000018   E0A0               LDI     R26, 0
   \   0000001A   E0B0               LDI     R27, 0
     37          		{
     38          			if ((xx[i]<<j) & 0x80)
   \                     ??whiten_0:
   \   0000001C   01F2               MOVW    R31:R30, R5:R4
   \   0000001E   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_6:
   \   00000020   F029               BREQ    ??whiten_1
     39          				modred(z,159-(i*8+j),A); /* z^=A<<(159-(i*8+j)) */
   \   00000022   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_15:
   \   00000024   ....               LDI     R20, LOW((??B + 40))
   \   00000026   ....               LDI     R21, (??B + 40) >> 8
   \   00000028   018E               MOVW    R17:R16, R29:R28
   \   0000002A   ....               RCALL   ??modred
     40          		}
   \                     ??whiten_1:
   \   0000002C   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_17:
   \   0000002E   F3B4               BRLT    ??whiten_0
     41          	}
   \   00000030   9601               ADIW    R25:R24, 1
   \   00000032   3184               CPI     R24, 20
   \   00000034   0790               CPC     R25, R16
   \   00000036   F384               BRLT    ??CrossCallReturnLabel_1
     42          
     43          
     44          	/* AX MOD G done as modular reduction for bit 160 to 319 */
     45          	for (i=0;i<20;i++)
   \   00000038   ....               RCALL   ?Subroutine5
     46          	{
     47          		for (j=0;j<8;j++)
   \                     ??CrossCallReturnLabel_2:
   \   0000003A   E0A0               LDI     R26, 0
   \   0000003C   E0B0               LDI     R27, 0
     48          		{
     49          			if ((z[i]<<j)&0x80)
   \                     ??whiten_2:
   \   0000003E   01FE               MOVW    R31:R30, R29:R28
   \   00000040   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_7:
   \   00000042   F029               BREQ    ??whiten_3
     50          				modred(z,159-(i*8+j),G);
   \   00000044   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_16:
   \   00000046   ....               LDI     R20, LOW((??B + 20))
   \   00000048   ....               LDI     R21, (??B + 20) >> 8
   \   0000004A   018E               MOVW    R17:R16, R29:R28
   \   0000004C   ....               RCALL   ??modred
     51          		}
   \                     ??whiten_3:
   \   0000004E   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_18:
   \   00000050   F3B4               BRLT    ??whiten_2
     52          	}
   \   00000052   9601               ADIW    R25:R24, 1
   \   00000054   3184               CPI     R24, 20
   \   00000056   0790               CPC     R25, R16
   \   00000058   F384               BRLT    ??CrossCallReturnLabel_2
     53          
     54          	/* add B and copy back result */
     55          	for (i = 0; i < 20; i++)
   \   0000005A   ....               RCALL   ?Subroutine5
     56          		xx[i] = z[i+20] ^ B[i];
   \                     ??CrossCallReturnLabel_3:
   \   0000005C   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_25:
   \   0000005E   8904               LDD     R16, Z+20
   \   00000060   01FC               MOVW    R31:R30, R25:R24
   \   00000062   ....               SUBI    R30, LOW((-(??B) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(??B) & 0xFFFF) >> 8
   \   00000066   8110               LD      R17, Z
   \   00000068   2710               EOR     R17, R16
   \   0000006A   01F2               MOVW    R31:R30, R5:R4
   \   0000006C   ....               RCALL   ??Subroutine32_0
   \                     ??CrossCallReturnLabel_26:
   \   0000006E   8310               ST      Z, R17
   \   00000070   9601               ADIW    R25:R24, 1
   \   00000072   3184               CPI     R24, 20
   \   00000074   E000               LDI     R16, 0
   \   00000076   0790               CPC     R25, R16
   \   00000078   F38C               BRLT    ??CrossCallReturnLabel_3
     57          }
   \   0000007A   96A8               ADIW    R29:R28, 40
   \   0000007C   E0E6               LDI     R30, 6
   \   0000007E   ....               RJMP    ?EPILOGUE_B6_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   9611               ADIW    R27:R26, 1
   \   00000002   30A8               CPI     R26, 8
   \   00000004   E000               LDI     R16, 0
   \   00000006   07B0               CPC     R27, R16
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   E92F               LDI     R18, 159
   \   00000002   E030               LDI     R19, 0
   \   00000004   018C               MOVW    R17:R16, R25:R24
   \   00000006   E043               LDI     R20, 3
   \   00000008   ....               RCALL   ?S_SHL_L02
   \   0000000A   1B20               SUB     R18, R16
   \   0000000C   0B31               SBC     R19, R17
   \   0000000E   1B2A               SUB     R18, R26
   \   00000010   0B3B               SBC     R19, R27
   \   00000012   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RCALL   ??Subroutine32_0
   \                     ??CrossCallReturnLabel_27:
   \   00000002   8100               LD      R16, Z
   \   00000004   E010               LDI     R17, 0
   \   00000006   2F4A               MOV     R20, R26
   \   00000008   ....               RCALL   ?S_SHL_L02
   \   0000000A   7800               ANDI    R16, 0x80
   \   0000000C   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \                     ??Subroutine32_0:
   \   00000002   0FE8               ADD     R30, R24
   \   00000004   1FF9               ADC     R31, R25
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   E080               LDI     R24, 0
   \   00000002   E090               LDI     R25, 0
   \   00000004   9508               RET
     58          
     59          /* This function perform the operation of shifting 320 bits and XOR.
     60           *
     61           *
     62          */
     63          

   \                                 In segment CODE, align 2, keep-with-next
     64          static
     65          void modred(uchar *z,int shift,uchar *base)
   \                     ??modred:
     66          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   9765               SBIW    R29:R28, 21
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     67          	int byteshift, bitshift,i;
     68          	uchar q[21],yn,yn1;
     69          
     70          	for (i=0;i<20;i++)
   \   00000006   ....               RCALL   ?Subroutine38
     71          		q[i] = base[i];
   \                     ??CrossCallReturnLabel_99:
   \   00000008   01FA               MOVW    R31:R30, R21:R20
   \   0000000A   0FE6               ADD     R30, R22
   \   0000000C   1FF7               ADC     R31, R23
   \   0000000E   8100               LD      R16, Z
   \   00000010   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_10:
   \   00000012   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_8:
   \   00000014   F3CC               BRLT    ??CrossCallReturnLabel_99
     72          	q[20] = 0;
   \   00000016   8B0C               STD     Y+20, R16
     73          
     74          	/* we divide into byte shifting and bit shifting */
     75          	byteshift = shift / 8;
   \   00000018   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_19:
   \   0000001A   01C8               MOVW    R25:R24, R17:R16
     76          	bitshift = shift % 8;
   \   0000001C   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_20:
   \   0000001E   019A               MOVW    R19:R18, R21:R20
     77          
     78          	/* do bit shifting */
     79          	if (bitshift != 0)
   \   00000020   2F04               MOV     R16, R20
   \   00000022   2B05               OR      R16, R21
   \   00000024   F0B9               BREQ    ??modred_1
     80          	{
     81          		yn = 0;
   \   00000026   2411               CLR     R1
     82          		for (i = 0; i <= 20; i++)
   \   00000028   ....               RCALL   ?Subroutine38
     83          		{
     84          			yn1 = yn;
   \                     ??CrossCallReturnLabel_100:
   \   0000002A   2D51               MOV     R21, R1
     85          			yn = q[i];
   \   0000002C   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_11:
   \   0000002E   8100               LD      R16, Z
   \   00000030   2E10               MOV     R1, R16
     86          			q[i] >>= 8-bitshift;
     87          			q[i] |= yn1 << bitshift;
   \   00000032   E048               LDI     R20, 8
   \   00000034   1B42               SUB     R20, R18
   \   00000036   ....               RCALL   ?UC_SHR_L01
   \   00000038   2E00               MOV     R0, R16
   \   0000003A   2F05               MOV     R16, R21
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   2F42               MOV     R20, R18
   \   00000040   ....               RCALL   ?S_SHL_L02
   \   00000042   2900               OR      R16, R0
   \   00000044   8300               ST      Z, R16
     88          		}
   \   00000046   5F6F               SUBI    R22, 255
   \   00000048   4F7F               SBCI    R23, 255
   \   0000004A   3165               CPI     R22, 21
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0770               CPC     R23, R16
   \   00000050   F364               BRLT    ??CrossCallReturnLabel_100
     89          		/* shift one more byte, since bits have effectively been
     90          		   shifted into the next byte upward */
     91          		byteshift++;
   \   00000052   9601               ADIW    R25:R24, 1
     92          	}
     93          
     94          	/* z ^= q and send back result in z */
     95          	for (i = 0; i < 20; i++)
   \                     ??modred_1:
   \   00000054   ....               RCALL   ?Subroutine38
     96          		z[i+20-byteshift] ^= q[i];
   \                     ??CrossCallReturnLabel_101:
   \   00000056   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_12:
   \   00000058   8140               LD      R20, Z
   \   0000005A   018B               MOVW    R17:R16, R23:R22
   \   0000005C   5E0C               SUBI    R16, 236
   \   0000005E   4F1F               SBCI    R17, 255
   \   00000060   1B08               SUB     R16, R24
   \   00000062   0B19               SBC     R17, R25
   \   00000064   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_21:
   \   00000066   8100               LD      R16, Z
   \   00000068   2704               EOR     R16, R20
   \   0000006A   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_9:
   \   0000006C   F3A4               BRLT    ??CrossCallReturnLabel_101
     97          	if (bitshift != 0)
   \   0000006E   2B23               OR      R18, R19
   \   00000070   F051               BREQ    ??modred_2
     98          		z[40-byteshift] ^= q[20];
   \   00000072   890C               LDD     R16, Y+20
   \   00000074   9591               NEG     R25
   \   00000076   9581               NEG     R24
   \   00000078   4090               SBCI    R25, 0
   \   0000007A   0FA8               ADD     R26, R24
   \   0000007C   1FB9               ADC     R27, R25
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   A510               LDD     R17, Z+40
   \   00000082   2710               EOR     R17, R16
   \   00000084   A710               STD     Z+40, R17
     99          }
   \                     ??modred_2:
   \   00000086   9665               ADIW    R29:R28, 21
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ....               RJMP    ?EPILOGUE_B4_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0189               MOVW    R17:R16, R19:R18
   \   00000002   E048               LDI     R20, 8
   \   00000004   E050               LDI     R21, 0
   \   00000006   ....               RJMP    ?SS_DIVMOD_L02

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \   00000002   0FE6               ADD     R30, R22
   \   00000004   1FF7               ADC     R31, R23
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   8300               ST      Z, R16
   \   00000002   5F6F               SUBI    R22, 255
   \   00000004   4F7F               SBCI    R23, 255
   \   00000006   3164               CPI     R22, 20
   \   00000008   E000               LDI     R16, 0
   \   0000000A   0770               CPC     R23, R16
   \   0000000C   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RJMP    ?Subroutine54

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E070               LDI     R23, 0
   \   00000004   9508               RET
    100          
    101          /* This function performs generation of 64-bit pseudo random number RAND.
    102           *
    103           *
    104          */
    105          

   \                                 In segment CODE, align 2, keep-with-next
    106          void
    107          f0(uchar seed[],uchar fi,uchar Fmk[],uchar buff[])
   \                     f0:
    108          {
   \   00000000   ....               RCALL   ?PROLOGUE7_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_103:
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E62               MOV     R6, R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
   \   0000000A   012B               MOVW    R5:R4, R23:R22
    109          	SHA_INFO sha_info;
    110          	uchar buf[64];
    111          	uchar t;
    112          	int i;
    113          
    114          	shaInitial(&sha_info);
   \   0000000C   ....               RCALL   ?Subroutine34
    115          	for (i = 0; i < L_KEY; i++)
   \                     ??CrossCallReturnLabel_54:
   \   0000000E   ....               RCALL   ??Subroutine27_0
    116          		sha_info.digest[i] ^= seed[i];
   \                     ??CrossCallReturnLabel_84:
   \   00000010   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_150:
   \   00000012   8120               LD      R18, Z
   \   00000014   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_153:
   \   00000016   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_133:
   \   00000018   F3DC               BRLT    ??CrossCallReturnLabel_84
    117          
    118          	for (i = 0; i < 64; i++)
   \   0000001A   ....               RCALL   ??Subroutine27_0
    119          		buf[i] = 0x5c;
   \                     ??CrossCallReturnLabel_85:
   \   0000001C   E52C               LDI     R18, 92
   \   0000001E   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_139:
   \   00000020   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_123:
   \   00000022   F3E4               BRLT    ??CrossCallReturnLabel_85
    120          
    121          	for (i = 0; i < 8; i++)
   \   00000024   ....               RCALL   ??Subroutine27_0
    122          	{
    123          		buf[i] ^= counter[i];
   \                     ??CrossCallReturnLabel_86:
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(??counter) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(??counter) & 0xFFFF) >> 8
   \   0000002C   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_4:
   \   0000002E   8130               LD      R19, Z
   \   00000030   2732               EOR     R19, R18
   \   00000032   8330               ST      Z, R19
    124          		buf[i+16] ^= counter[i];
   \   00000034   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_140:
   \   00000036   8930               LDD     R19, Z+16
   \   00000038   2732               EOR     R19, R18
   \   0000003A   8B30               STD     Z+16, R19
    125          		buf[i+32] ^= counter[i];
   \   0000003C   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_141:
   \   0000003E   A130               LDD     R19, Z+32
   \   00000040   2732               EOR     R19, R18
   \   00000042   A330               STD     Z+32, R19
    126          		buf[i+48] ^= counter[i];
   \   00000044   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_142:
   \   00000046   A930               LDD     R19, Z+48
   \   00000048   2732               EOR     R19, R18
   \   0000004A   AB30               STD     Z+48, R19
    127          	}
   \   0000004C   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_130:
   \   0000004E   F35C               BRLT    ??CrossCallReturnLabel_86
    128          
    129          	buf[11] ^= fi;
   \   00000050   850B               LDD     R16, Y+11
   \   00000052   2506               EOR     R16, R6
   \   00000054   870B               STD     Y+11, R16
    130          
    131          	for (i = 0; i < 4; i++)
   \   00000056   ....               RCALL   ??Subroutine27_0
    132          		buf[i+12] ^= Fmk[i];
   \                     ??CrossCallReturnLabel_87:
   \   00000058   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_22:
   \   0000005A   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_5:
   \   0000005C   8534               LDD     R19, Z+12
   \   0000005E   2732               EOR     R19, R18
   \   00000060   8734               STD     Z+12, R19
   \   00000062   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_127:
   \   00000064   F3CC               BRLT    ??CrossCallReturnLabel_87
    133          	shaUpdate(&sha_info,buf,0,512);
   \   00000066   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_111:
   \   00000068   ....               RCALL   ?Subroutine33
    134          	/* perform (AX+B)mod G */
    135          	whiten(sha_info.digest);
    136          
    137          	/* get 8 bytes or 64 bits */
    138          	for (i=0;i<8;i++)
   \                     ??CrossCallReturnLabel_50:
   \   0000006A   ....               RCALL   ??Subroutine27_0
    139          		buff[i] = sha_info.digest[i];
   \                     ??CrossCallReturnLabel_88:
   \   0000006C   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_154:
   \   0000006E   8120               LD      R18, Z
   \   00000070   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_31:
   \   00000072   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_131:
   \   00000074   F3DC               BRLT    ??CrossCallReturnLabel_88
    140          
    141          	/* increment counter */
    142          	for (i = 7; i >= 0; i--)
   \   00000076   E007               LDI     R16, 7
   \   00000078   E010               LDI     R17, 0
    143          	{
    144          		t = counter[i];
   \                     ??f0_0:
   \   0000007A   ....               LDI     R30, LOW(??counter)
   \   0000007C   ....               LDI     R31, (??counter) >> 8
   \   0000007E   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_138:
   \   00000080   8120               LD      R18, Z
    145          		counter[i]++;
   \   00000082   2F32               MOV     R19, R18
   \   00000084   9533               INC     R19
   \   00000086   8330               ST      Z, R19
    146          		if (counter[i] > t)
   \   00000088   1723               CP      R18, R19
   \   0000008A   F018               BRCS    ??f0_1
    147          			break;
    148          	}
   \   0000008C   5001               SUBI    R16, 1
   \   0000008E   4010               SBCI    R17, 0
   \   00000090   F7A2               BRPL    ??f0_0
    149          }
   \                     ??f0_1:
   \   00000092   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_114:
   \   00000094   E0E7               LDI     R30, 7
   \   00000096   ....               RJMP    ?EPILOGUE_B7_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   8130               LD      R19, Z
   \   00000002   2732               EOR     R19, R18
   \   00000004   8330               ST      Z, R19
   \                     ??Subroutine39_0:
   \   00000006   5F0F               SUBI    R16, 255
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   3100               CPI     R16, 16
   \   0000000C   ....               RJMP    ?Subroutine53

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   3008               CPI     R16, 8
   \   00000006   ....               RJMP    ?Subroutine53

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \   00000002   5CE0               SUBI    R30, 192
   \   00000004                      REQUIRE ?Subroutine47
   \   00000004                      ;               // Fall through to label ?Subroutine47

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   4FFF               SBCI    R31, 255
   \   00000002                      REQUIRE ?Subroutine54
   \   00000002                      ;               // Fall through to label ?Subroutine54

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   8120               LD      R18, Z
   \   00000002   ....               RJMP    ??Subroutine26_0

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   E012               LDI     R17, 2
   \   00000002   932A               ST      -Y, R18
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   932A               ST      -Y, R18
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   3004               CPI     R16, 4
   \   00000006                      REQUIRE ?Subroutine53
   \   00000006                      ;               // Fall through to label ?Subroutine53

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   E020               LDI     R18, 0
   \   00000002   0712               CPC     R17, R18
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   01F2               MOVW    R31:R30, R5:R4
   \   00000002   0FE0               ADD     R30, R16
   \   00000004   1FF1               ADC     R31, R17
   \   00000006   8320               ST      Z, R18
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   shaInitial
   \                     ??Subroutine27_0:
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   8120               LD      R18, Z
   \                     ??Subroutine26_0:
   \   00000006   01FE               MOVW    R31:R30, R29:R28
   \   00000008   ....               RJMP    ?Subroutine54

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   96EF               ADIW    R29:R28, 63
   \   00000002   96EF               ADIW    R29:R28, 63
   \   00000004   966E               ADIW    R29:R28, 30
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   97EF               SBIW    R29:R28, 63
   \   00000002   97EF               SBIW    R29:R28, 63
   \   00000004   976E               SBIW    R29:R28, 30
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   019E               MOVW    R19:R18, R29:R28
   \   0000000A   5F2C               SUBI    R18, 252
   \   0000000C   4F3F               SBCI    R19, 255
   \   0000000E   018E               MOVW    R17:R16, R29:R28
   \   00000010   5B0C               SUBI    R16, 188
   \   00000012   4F1F               SBCI    R17, 255
   \   00000014   ....               RCALL   shaUpdate
   \   00000016   018E               MOVW    R17:R16, R29:R28
   \   00000018   5C00               SUBI    R16, 192
   \   0000001A   4F1F               SBCI    R17, 255
   \   0000001C   ....               RJMP    whiten

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   018E               MOVW    R17:R16, R29:R28
   \   00000002   5C00               SUBI    R16, 192
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   ....               RJMP    shaInitial

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   ....               RJMP    ?Subroutine54

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   8320               ST      Z, R18
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   3400               CPI     R16, 64
   \   00000008   ....               RJMP    ?Subroutine53
    150          
    151          /* This function performs generation of authentication signature MACA.
    152           *
    153           *
    154          */
    155          

   \                                 In segment CODE, align 2, keep-with-next
    156          void
    157          f1(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar SQN[],uchar AMF[],uchar MACA[])
   \                     f1:
   \   00000000                      REQUIRE ?Subroutine58
   \   00000000                      ;               // Fall through to label ?Subroutine58

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   ....               RCALL   ?PROLOGUE13_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002                      REQUIRE ?Register_R12_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_28:
   \   00000004   ....               RJMP    ?EPILOGUE_B13_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_105:
   \   00000002   0148               MOVW    R9:R8, R17:R16
   \   00000004   2EC2               MOV     R12, R18
   \   00000006   015A               MOVW    R11:R10, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
   \   0000000A   01FE               MOVW    R31:R30, R29:R28
   \   0000000C   55E7               SUBI    R30, 87
   \   0000000E   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_158:
   \   00000010   55E5               SUBI    R30, 85
   \   00000012   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_120:
   \   00000014   01FE               MOVW    R31:R30, R29:R28
   \   00000016   55E3               SUBI    R30, 83
   \   00000018   4FFF               SBCI    R31, 255
   \   0000001A   8040               LD      R4, Z
   \   0000001C   8051               LDD     R5, Z+1
   \   0000001E   018E               MOVW    R17:R16, R29:R28
   \   00000020   5C00               SUBI    R16, 192
   \   00000022   4F1F               SBCI    R17, 255
   \   00000024   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_82:
   \   00000026   01F4               MOVW    R31:R30, R9:R8
   \   00000028   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_108:
   \   0000002A   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_29:
   \   0000002C   2723               EOR     R18, R19
   \   0000002E   8320               ST      Z, R18
   \   00000030   ....               RCALL   ??Subroutine39_0
   \                     ??CrossCallReturnLabel_136:
   \   00000032   F3CC               BRLT    ??CrossCallReturnLabel_82
   \   00000034   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_89:
   \   00000036   E53C               LDI     R19, 92
   \   00000038   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_143:
   \   0000003A   8330               ST      Z, R19
   \   0000003C   5F0F               SUBI    R16, 255
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   3400               CPI     R16, 64
   \   00000042   0712               CPC     R17, R18
   \   00000044   F3C4               BRLT    ??CrossCallReturnLabel_89
   \   00000046   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_90:
   \   00000048   01F3               MOVW    R31:R30, R7:R6
   \   0000004A   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_109:
   \   0000004C   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_144:
   \   0000004E   8524               LDD     R18, Z+12
   \   00000050   2723               EOR     R18, R19
   \   00000052   8724               STD     Z+12, R18
   \   00000054   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_128:
   \   00000056   F3C4               BRLT    ??CrossCallReturnLabel_90
   \   00000058   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_91:
   \   0000005A   01F5               MOVW    R31:R30, R11:R10
   \   0000005C   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_145:
   \   0000005E   8930               LDD     R19, Z+16
   \   00000060   2732               EOR     R19, R18
   \   00000062   8B30               STD     Z+16, R19
   \   00000064   ....               RCALL   ??Subroutine39_0
   \                     ??CrossCallReturnLabel_137:
   \   00000066   F3CC               BRLT    ??CrossCallReturnLabel_91
   \   00000068   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_92:
   \   0000006A   01FD               MOVW    R31:R30, R27:R26
   \   0000006C   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_146:
   \   0000006E   A132               LDD     R19, Z+34
   \   00000070   2732               EOR     R19, R18
   \   00000072   A332               STD     Z+34, R19
   \   00000074   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_125:
   \   00000076   F3CC               BRLT    ??CrossCallReturnLabel_92
   \   00000078   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_93:
   \   0000007A   01FC               MOVW    R31:R30, R25:R24
   \   0000007C   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_147:
   \   0000007E   A532               LDD     R19, Z+42
   \   00000080   2732               EOR     R19, R18
   \   00000082   A732               STD     Z+42, R19
   \   00000084   5F0F               SUBI    R16, 255
   \   00000086   4F1F               SBCI    R17, 255
   \   00000088   3002               CPI     R16, 2
   \   0000008A   E020               LDI     R18, 0
   \   0000008C   0712               CPC     R17, R18
   \   0000008E   F3AC               BRLT    ??CrossCallReturnLabel_93
   \   00000090   850B               LDD     R16, Y+11
   \   00000092   250C               EOR     R16, R12
   \   00000094   870B               STD     Y+11, R16
   \   00000096   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_112:
   \   00000098   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_52:
   \   0000009A   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_94:
   \   0000009C   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_30:
   \   0000009E   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_32:
   \   000000A0   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_132:
   \   000000A2   F3E4               BRLT    ??CrossCallReturnLabel_94
   \   000000A4   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_116:
   \   000000A6   E1E3               LDI     R30, 19
   \   000000A8   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \   00000002   5CE0               SUBI    R30, 192
   \   00000004   4FFF               SBCI    R31, 255
   \   00000006   0FE0               ADD     R30, R16
   \   00000008   1FF1               ADC     R31, R17
   \   0000000A   8120               LD      R18, Z
   \   0000000C   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   4FFF               SBCI    R31, 255
   \   00000002   81A0               LD      R26, Z
   \   00000004   81B1               LDD     R27, Z+1
   \   00000006                      REQUIRE ?Subroutine57
   \   00000006                      ;               // Fall through to label ?Subroutine57

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \   00000002   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   4FFF               SBCI    R31, 255
   \   00000002   8180               LD      R24, Z
   \   00000004   8191               LDD     R25, Z+1
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   8130               LD      R19, Z
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   3006               CPI     R16, 6
   \   00000006   ....               RJMP    ?Subroutine53
    158          {
    159          	SHA_INFO sha_info;
    160          	uchar buf[64];
    161          	int i;
    162          
    163          	/* NOTE: the following initialization of the sha_info struct can be performed
    164          	   once when K is provisioned, and the results copied into sha_info at the
    165          	   start of this function. */
    166          	shaInitial(&sha_info);
    167          	for (i = 0; i < L_KEY; i++)
    168          		sha_info.digest[i] ^= K[i];
    169          
    170          	for (i = 0; i < 64; i++)
    171          		buf[i] = 0x5c;
    172          
    173          	for (i = 0; i < 4; i++)
    174          		buf[i+12] ^= Fmk[i];
    175          	for (i = 0; i < 16; i++)
    176          		buf[i+16] ^= RAND[i];
    177          	for (i = 0; i < 6; i++)
    178          		buf[i+34] ^= SQN[i];
    179          	for (i = 0; i < 2; i++)
    180          		buf[i+42] ^= AMF[i];
    181          
    182          	buf[11] ^= fi;
    183          
    184          	shaUpdate(&sha_info,buf,0,512);
    185          
    186          	/* perform (AX+B)mod G */
    187          	whiten(sha_info.digest);
    188          
    189          	for (i=0;i<L_MACA;i++)
    190          		MACA[i] = sha_info.digest[i];
    191          }
    192          
    193          /* This function performs generation of resync authentication signature MACS.
    194           *
    195           *
    196          */
    197          

   \                                 In segment CODE, align 2, keep-with-next
    198          void
    199          f1star(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar SQN[],uchar AMF[],uchar MACS[])
   \                     f1star:
   \   00000000   ....               RJMP    ?Subroutine58
    200          {
    201          	SHA_INFO sha_info;
    202          	uchar buf[64];
    203          	int i;
    204          
    205          	/* NOTE: the following initialization of the sha_info struct can be performed
    206          	   once when K is provisioned, and the results copied into sha_info at the
    207          	   start of this function. */
    208          	shaInitial(&sha_info);
    209          	for (i = 0; i < L_KEY; i++)
    210          		sha_info.digest[i] ^= K[i];
    211          
    212          	for (i = 0; i < 64; i++)
    213          		buf[i] = 0x5c;
    214          
    215          	for (i = 0; i < 4; i++)
    216          		buf[i+12] ^= Fmk[i];
    217          	for (i = 0; i < 16; i++)
    218          		buf[i+16] ^= RAND[i];
    219          	for (i = 0; i < 6; i++)
    220          		buf[i+34] ^= SQN[i];
    221          	for (i = 0; i < 2; i++)
    222          		buf[i+42] ^= AMF[i];
    223          
    224          	buf[11] ^= fi;
    225          
    226          	shaUpdate(&sha_info,buf,0,512);
    227          
    228          	/* perform (AX+B)mod G */
    229          	whiten(sha_info.digest);
    230          
    231          	for (i=0;i<L_MACS;i++)
    232          		MACS[i] = sha_info.digest[i];
    233          }
    234          
    235          /* This function performs generation of user response RES.
    236           *
    237           *
    238          */
    239          

   \                                 In segment CODE, align 2, keep-with-next
    240          void
    241          f2(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar RES[],int l_res)
   \                     f2:
    242          {
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_104:
   \   00000004   0158               MOVW    R11:R10, R17:R16
   \   00000006   2E92               MOV     R9, R18
   \   00000008   013A               MOVW    R7:R6, R21:R20
   \   0000000A   012B               MOVW    R5:R4, R23:R22
   \   0000000C   01FE               MOVW    R31:R30, R29:R28
   \   0000000E   55E8               SUBI    R30, 88
   \   00000010   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_157:
   \   00000012   55E6               SUBI    R30, 86
   \   00000014   ....               RCALL   ?Subroutine50
    243          	SHA_INFO sha_info;
    244          	uchar j,buf[64];
    245          	int i;
    246          
    247          	if (l_res < 1)
   \                     ??CrossCallReturnLabel_119:
   \   00000016   3081               CPI     R24, 1
   \   00000018   E000               LDI     R16, 0
   \   0000001A   0790               CPC     R25, R16
   \   0000001C   F40C               BRGE    $+2+2
   \   0000001E   C04F               RJMP    ??f2_0
    248          		return;
    249          	if (l_res > 16)
   \   00000020   3181               CPI     R24, 17
   \   00000022   0790               CPC     R25, R16
   \   00000024   F014               BRLT    ??f2_1
    250          		l_res = 16;
   \   00000026   E180               LDI     R24, 16
   \   00000028   E090               LDI     R25, 0
    251          
    252          	for (j = 0; j < 2; j++)
   \                     ??f2_1:
   \   0000002A   2488               CLR     R8
    253          	{
    254          		/* NOTE: the following initialization of the sha_info struct can be performed
    255          		   once when K is provisioned, and the results copied into sha_info at the
    256          		   start of this loop. */
    257          		shaInitial(&sha_info);
   \                     ??f2_2:
   \   0000002C   ....               RCALL   ?Subroutine18
    258          		for (i = 0; i < L_KEY; i++)
    259          			sha_info.digest[i] ^= K[i];
   \                     ??CrossCallReturnLabel_72:
   \   0000002E   01F5               MOVW    R31:R30, R11:R10
   \   00000030   0FE2               ADD     R30, R18
   \   00000032   1FF3               ADC     R31, R19
   \   00000034   8110               LD      R17, Z
   \   00000036   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_64:
   \   00000038   8100               LD      R16, Z
   \   0000003A   2701               EOR     R16, R17
   \   0000003C   8300               ST      Z, R16
   \   0000003E   ....               RCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_35:
   \   00000040   F3B4               BRLT    ??CrossCallReturnLabel_72
    260          
    261          		for (i = 0; i < 64; i++)
   \   00000042   ....               RCALL   ?Subroutine56
    262          			buf[i] = 0x5c;
   \                     ??CrossCallReturnLabel_74:
   \   00000044   E51C               LDI     R17, 92
   \   00000046   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_68:
   \   00000048   8310               ST      Z, R17
   \   0000004A   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_57:
   \   0000004C   3420               CPI     R18, 64
   \   0000004E   0730               CPC     R19, R16
   \   00000050   F3CC               BRLT    ??CrossCallReturnLabel_74
    263          
    264          		for (i = 0; i < 4; i++)
   \   00000052   ....               RCALL   ?Subroutine56
    265          			buf[i+12] ^= Fmk[i];
   \                     ??CrossCallReturnLabel_75:
   \   00000054   01F2               MOVW    R31:R30, R5:R4
   \   00000056   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_13:
   \   00000058   8504               LDD     R16, Z+12
   \   0000005A   2701               EOR     R16, R17
   \   0000005C   8704               STD     Z+12, R16
   \   0000005E   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_58:
   \   00000060   3024               CPI     R18, 4
   \   00000062   ....               RCALL   ??Subroutine3_1
   \                     ??CrossCallReturnLabel_38:
   \   00000064   F3BC               BRLT    ??CrossCallReturnLabel_75
    266          		for (i = 0; i < 16; i++)
   \   00000066   ....               RCALL   ?Subroutine56
    267          			buf[i+24] ^= RAND[i];
   \                     ??CrossCallReturnLabel_76:
   \   00000068   01F3               MOVW    R31:R30, R7:R6
   \   0000006A   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_14:
   \   0000006C   8D00               LDD     R16, Z+24
   \   0000006E   2701               EOR     R16, R17
   \   00000070   8F00               STD     Z+24, R16
   \   00000072   ....               RCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_36:
   \   00000074   F3CC               BRLT    ??CrossCallReturnLabel_76
    268          
    269          		buf[3] ^= j;
   \   00000076   810B               LDD     R16, Y+3
   \   00000078   2508               EOR     R16, R8
   \   0000007A   830B               STD     Y+3, R16
    270          		buf[11] ^= fi;
   \   0000007C   850B               LDD     R16, Y+11
   \   0000007E   2509               EOR     R16, R9
   \   00000080   870B               STD     Y+11, R16
    271          		buf[19] ^= j;
   \   00000082   890B               LDD     R16, Y+19
   \   00000084   2508               EOR     R16, R8
   \   00000086   8B0B               STD     Y+19, R16
    272          		buf[35] ^= j;
   \   00000088   A10B               LDD     R16, Y+35
   \   0000008A   2508               EOR     R16, R8
   \   0000008C   A30B               STD     Y+35, R16
    273          		buf[51] ^= j;
   \   0000008E   A90B               LDD     R16, Y+51
   \   00000090   2508               EOR     R16, R8
   \   00000092   ....               RCALL   ?Subroutine30
    274          
    275          		shaUpdate(&sha_info,buf,0,512);
   \                     ??CrossCallReturnLabel_47:
   \   00000094   ....               RCALL   ?Subroutine33
    276          
    277          		whiten(sha_info.digest);
    278          		for (i=0;i<8;i++)
   \                     ??CrossCallReturnLabel_51:
   \   00000096   ....               RCALL   ?Subroutine56
    279          		{
    280          			RES[8*j+i] = sha_info.digest[i];
   \                     ??CrossCallReturnLabel_77:
   \   00000098   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_65:
   \   0000009A   8150               LD      R21, Z
   \   0000009C   2D08               MOV     R16, R8
   \   0000009E   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_55:
   \   000000A0   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_23:
   \   000000A2   8350               ST      Z, R21
    281          			if (--l_res == 0)
   \   000000A4   9701               SBIW    R25:R24, 1
   \   000000A6   2F08               MOV     R16, R24
   \   000000A8   2B09               OR      R16, R25
   \   000000AA   F049               BREQ    ??f2_0
    282          				return;
    283          		}
   \   000000AC   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_59:
   \   000000AE   3028               CPI     R18, 8
   \   000000B0   ....               RCALL   ??Subroutine3_1
   \                     ??CrossCallReturnLabel_39:
   \   000000B2   F394               BRLT    ??CrossCallReturnLabel_77
    284          	}
   \   000000B4   9483               INC     R8
   \   000000B6   E002               LDI     R16, 2
   \   000000B8   1680               CP      R8, R16
   \   000000BA   F408               BRCC    $+2+2
   \   000000BC   CFB7               RJMP    ??f2_2
   \                     ??f2_0:
   \   000000BE   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_115:
   \   000000C0   E1E0               LDI     R30, 16
   \   000000C2   ....               RJMP    ?EPILOGUE_B12_L09
    285          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0FE2               ADD     R30, R18
   \   00000002   1FF3               ADC     R31, R19
   \   00000004   8110               LD      R17, Z
   \   00000006   ....               RJMP    ??Subroutine29_0

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   01FE               MOVW    R31:R30, R29:R28
   \   00000002   5CE0               SUBI    R30, 192
   \   00000004   4FFF               SBCI    R31, 255
   \   00000006                      REQUIRE ?Subroutine55
   \   00000006                      ;               // Fall through to label ?Subroutine55

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   0FE2               ADD     R30, R18
   \   00000002   1FF3               ADC     R31, R19
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_53:
   \   00000002   ....               RJMP    ?Subroutine56

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0FE2               ADD     R30, R18
   \   00000002   1FF3               ADC     R31, R19
   \   00000004   8100               LD      R16, Z
   \                     ??Subroutine29_0:
   \   00000006   01FE               MOVW    R31:R30, R29:R28
   \   00000008   ....               RJMP    ?Subroutine55

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   5F2F               SUBI    R18, 255
   \   00000002   4F3F               SBCI    R19, 255
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   01F4               MOVW    R31:R30, R9:R8
   \   00000002   0FE2               ADD     R30, R18
   \   00000004   1FF3               ADC     R31, R19
   \   00000006   8100               LD      R16, Z
   \   00000008   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_67:
   \   0000000A   8110               LD      R17, Z
   \   0000000C   2710               EOR     R17, R16
   \   0000000E   8310               ST      Z, R17
   \                     ??Subroutine3_0:
   \   00000010   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_61:
   \   00000012   3120               CPI     R18, 16
   \                     ??Subroutine3_1:
   \   00000014   E000               LDI     R16, 0
   \   00000016   0730               CPC     R19, R16
   \   00000018   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E043               LDI     R20, 3
   \   00000004   ....               RCALL   ?S_SHL_L02
   \   00000006   0F02               ADD     R16, R18
   \   00000008   1F13               ADC     R17, R19
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   AB0B               STD     Y+51, R16
   \   00000002   E000               LDI     R16, 0
   \   00000004   E012               LDI     R17, 2
   \   00000006   930A               ST      -Y, R16
   \   00000008   930A               ST      -Y, R16
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   9508               RET
    286          
    287          /* This function performs generation of cipher key CK.
    288           *
    289           *
    290          */
    291          

   \                                 In segment CODE, align 2, keep-with-next
    292          void
    293          f3(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar *CK)
   \                     f3:
   \   00000000                      REQUIRE ?Subroutine59
   \   00000000                      ;               // Fall through to label ?Subroutine59

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   ....               RCALL   ?PROLOGUE10_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_45:
   \   00000004   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_73:
   \   00000006   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_34:
   \   00000008   F3F4               BRLT    ??CrossCallReturnLabel_73
   \   0000000A   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_78:
   \   0000000C   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_43:
   \   0000000E   ....               RCALL   ??Subroutine3_1
   \                     ??CrossCallReturnLabel_40:
   \   00000010   F3EC               BRLT    ??CrossCallReturnLabel_78
   \   00000012   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_79:
   \   00000014   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_42:
   \   00000016   ....               RCALL   ??Subroutine3_1
   \                     ??CrossCallReturnLabel_41:
   \   00000018   F3EC               BRLT    ??CrossCallReturnLabel_79
   \   0000001A   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_80:
   \   0000001C   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_44:
   \   0000001E   ....               RCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_37:
   \   00000020   F3EC               BRLT    ??CrossCallReturnLabel_80
   \   00000022   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_33:
   \   00000024   F378               BRCS    ??CrossCallReturnLabel_45
   \   00000026   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_46:
   \   00000028   ....               RJMP    ?EPILOGUE_B10_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_117:
   \   00000002   E0EC               LDI     R30, 12
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_106:
   \   00000002   0148               MOVW    R9:R8, R17:R16
   \   00000004   2E72               MOV     R7, R18
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   \   0000000A   01FE               MOVW    R31:R30, R29:R28
   \   0000000C   55EA               SUBI    R30, 90
   \   0000000E   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_121:
   \   00000010   2466               CLR     R6
   \   00000012   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   01F2               MOVW    R31:R30, R5:R4
   \   00000002   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_71:
   \   00000004   8D10               LDD     R17, Z+24
   \   00000006   2710               EOR     R17, R16
   \   00000008   8F10               STD     Z+24, R17
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E50C               LDI     R16, 92
   \   00000002   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_70:
   \   00000004   8300               ST      Z, R16
   \   00000006   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_63:
   \   00000008   3420               CPI     R18, 64
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_69:
   \   00000004   8514               LDD     R17, Z+12
   \   00000006   2710               EOR     R17, R16
   \   00000008   8714               STD     Z+12, R17
   \   0000000A   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_62:
   \   0000000C   3024               CPI     R18, 4
   \   0000000E   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   810B               LDD     R16, Y+3
   \   00000002   2506               EOR     R16, R6
   \   00000004   830B               STD     Y+3, R16
   \   00000006   850B               LDD     R16, Y+11
   \   00000008   2507               EOR     R16, R7
   \   0000000A   870B               STD     Y+11, R16
   \   0000000C   890B               LDD     R16, Y+19
   \   0000000E   2506               EOR     R16, R6
   \   00000010   8B0B               STD     Y+19, R16
   \   00000012   A10B               LDD     R16, Y+35
   \   00000014   2506               EOR     R16, R6
   \   00000016   A30B               STD     Y+35, R16
   \   00000018   A90B               LDD     R16, Y+51
   \   0000001A   2506               EOR     R16, R6
   \   0000001C   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_48:
   \   0000001E   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_49:
   \   00000020   E020               LDI     R18, 0
   \   00000022   E030               LDI     R19, 0
   \                     ??Subroutine2_0:
   \   00000024   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_66:
   \   00000026   8150               LD      R21, Z
   \   00000028   2D06               MOV     R16, R6
   \   0000002A   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_56:
   \   0000002C   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_151:
   \   0000002E   8350               ST      Z, R21
   \   00000030   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_60:
   \   00000032   3028               CPI     R18, 8
   \   00000034   E000               LDI     R16, 0
   \   00000036   0730               CPC     R19, R16
   \   00000038   F3AC               BRLT    ??Subroutine2_0
   \   0000003A   9463               INC     R6
   \   0000003C   E002               LDI     R16, 2
   \   0000003E   1660               CP      R6, R16
   \   00000040   9508               RET
    294          {
    295          	SHA_INFO sha_info;
    296          	uchar j,buf[64];
    297          	int i;
    298          
    299          	for (j = 0; j < 2; j++)
    300          	{
    301          		/* NOTE: the following initialization of the sha_info struct can be performed
    302          		   once when K is provisioned, and the results copied into sha_info at the
    303          		   start of this loop. */
    304          		shaInitial(&sha_info);
    305          		for (i = 0; i < L_KEY; i++)
    306          			sha_info.digest[i] ^= K[i];
    307          
    308          		for (i = 0; i < 64; i++)
    309          			buf[i] = 0x5c;
    310          
    311          		for (i = 0; i < 4; i++)
    312          			buf[i+12] ^= Fmk[i];
    313          		for (i = 0; i < 16; i++)
    314          			buf[i+24] ^= RAND[i];
    315          
    316          		buf[3] ^= j;
    317          		buf[11] ^= fi;
    318          		buf[19] ^= j;
    319          		buf[35] ^= j;
    320          		buf[51] ^= j;
    321          
    322          		shaUpdate(&sha_info,buf,0,512);
    323          
    324          		whiten(sha_info.digest);
    325          		for (i=0;i<8;i++)
    326          			CK[8*j+i] = sha_info.digest[i];
    327          	}
    328          }
    329          
    330          /* This function performs generation of integrity key IK.
    331           *
    332           *
    333          */
    334          

   \                                 In segment CODE, align 2, keep-with-next
    335          void
    336          f4(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar *IK)
   \                     f4:
   \   00000000   ....               RJMP    ?Subroutine59
    337          {
    338          	SHA_INFO sha_info;
    339          	uchar j,buf[64];
    340          	int i;
    341          
    342          	for (j = 0; j < 2; j++)
    343          	{
    344          		/* NOTE: the following initialization of the sha_info struct can be performed
    345          		   once when K is provisioned, and the results copied into sha_info at the
    346          		   start of this loop. */
    347          		shaInitial(&sha_info);
    348          		for (i = 0; i < L_KEY; i++)
    349          			sha_info.digest[i] ^= K[i];
    350          
    351          		for (i = 0; i < 64; i++)
    352          			buf[i] = 0x5c;
    353          
    354          		for (i = 0; i < 4; i++)
    355          			buf[i+12] ^= Fmk[i];
    356          		for (i = 0; i < 16; i++)
    357          			buf[i+24] ^= RAND[i];
    358          
    359          		buf[3] ^= j;
    360          		buf[11] ^= fi;
    361          		buf[19] ^= j;
    362          		buf[35] ^= j;
    363          		buf[51] ^= j;
    364          
    365          		shaUpdate(&sha_info,buf,0,512);
    366          
    367          		whiten(sha_info.digest);
    368          		for (i=0;i<8;i++)
    369          			IK[8*j+i] = sha_info.digest[i];
    370          	}
    371          }
    372          
    373          /* This function performs generation of anonymity key AK.
    374           *
    375           *
    376          */
    377          

   \                                 In segment CODE, align 2, keep-with-next
    378          void
    379          f5(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar AK[])
   \                     f5:
   \   00000000                      REQUIRE ?Subroutine60
   \   00000000                      ;               // Fall through to label ?Subroutine60

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   ....               RCALL   ?PROLOGUE9_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_81:
   \   00000004   ....               RJMP    ?EPILOGUE_B9_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_107:
   \   00000002   0128               MOVW    R5:R4, R17:R16
   \   00000004   2E82               MOV     R8, R18
   \   00000006   013A               MOVW    R7:R6, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   \   0000000A   01FE               MOVW    R31:R30, R29:R28
   \   0000000C   55EB               SUBI    R30, 91
   \   0000000E   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_122:
   \   00000010   018E               MOVW    R17:R16, R29:R28
   \   00000012   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_83:
   \   00000014   01F2               MOVW    R31:R30, R5:R4
   \   00000016   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_148:
   \   00000018   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_134:
   \   0000001A   F3E4               BRLT    ??CrossCallReturnLabel_83
   \   0000001C   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_95:
   \   0000001E   E52C               LDI     R18, 92
   \   00000020   01FE               MOVW    R31:R30, R29:R28
   \   00000022   5AE4               SUBI    R30, 164
   \   00000024   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_155:
   \   00000026   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_124:
   \   00000028   F3D4               BRLT    ??CrossCallReturnLabel_95
   \   0000002A   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_96:
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_159:
   \   00000030   59E8               SUBI    R30, 152
   \   00000032   4FFF               SBCI    R31, 255
   \   00000034   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_110:
   \   00000036   2732               EOR     R19, R18
   \   00000038   8330               ST      Z, R19
   \   0000003A   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_129:
   \   0000003C   F3BC               BRLT    ??CrossCallReturnLabel_96
   \   0000003E   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_97:
   \   00000040   01F3               MOVW    R31:R30, R7:R6
   \   00000042   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_160:
   \   00000044   59E4               SUBI    R30, 148
   \   00000046   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_156:
   \   00000048   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_135:
   \   0000004A   F3D4               BRLT    ??CrossCallReturnLabel_97
   \   0000004C   01FE               MOVW    R31:R30, R29:R28
   \   0000004E   96FF               ADIW    R31:R30, 63
   \   00000050   A500               LDD     R16, Z+40
   \   00000052   2508               EOR     R16, R8
   \   00000054   A700               STD     Z+40, R16
   \   00000056   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_113:
   \   00000058   E040               LDI     R20, 0
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_102:
   \   0000005E   019E               MOVW    R19:R18, R29:R28
   \   00000060   5A20               SUBI    R18, 160
   \   00000062   4F3F               SBCI    R19, 255
   \   00000064   018E               MOVW    R17:R16, R29:R28
   \   00000066   5F0C               SUBI    R16, 252
   \   00000068   4F1F               SBCI    R17, 255
   \   0000006A   ....               RCALL   shaUpdate
   \   0000006C   018E               MOVW    R17:R16, R29:R28
   \   0000006E   ....               RCALL   whiten
   \   00000070   ....               RCALL   ??Subroutine27_0
   \                     ??CrossCallReturnLabel_98:
   \   00000072   ....               RCALL   ??Subroutine26_0
   \                     ??CrossCallReturnLabel_149:
   \   00000074   8120               LD      R18, Z
   \   00000076   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_152:
   \   00000078   8320               ST      Z, R18
   \   0000007A   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_126:
   \   0000007C   F3D4               BRLT    ??CrossCallReturnLabel_98
   \   0000007E   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_118:
   \   00000080   E0EB               LDI     R30, 11
   \   00000082   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   8120               LD      R18, Z
   \   00000006   ....               RJMP    ?Subroutine57
    380          {
    381          	SHA_INFO sha_info;
    382          	uchar buf[64];
    383          	int i;
    384          
    385          	/* NOTE: the following initialization of the sha_info struct can be performed
    386          	   once when K is provisioned, and the results copied into sha_info at the
    387          	   start of this function. */
    388          	shaInitial(&sha_info);
    389          	for (i = 0; i < L_KEY; i++)
    390          		sha_info.digest[i] ^= K[i];
    391          
    392          	for (i = 0; i < 64; i++)
    393          		buf[i] = 0x5c;
    394          
    395          	for (i = 0; i < 4; i++)
    396          		buf[i+12] ^= Fmk[i];
    397          	for (i = 0; i < 16; i++)
    398          		buf[i+16] ^= RAND[i];
    399          
    400          	buf[11] ^= fi;
    401          
    402          	shaUpdate(&sha_info,buf,0,512);
    403          
    404          	/* perform (AX+B)mod G */
    405          	whiten(sha_info.digest);
    406          
    407          	for (i=0;i<L_AK;i++)
    408          		AK[i] = sha_info.digest[i];
    409          }
    410          
    411          /* This function performs generation of anonymity key AK for
    412           * resynchronization.
    413           *
    414           *
    415          */
    416          

   \                                 In segment CODE, align 2, keep-with-next
    417          void
    418          f5star(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar AKS[])
   \                     f5star:
   \   00000000   ....               RJMP    ?Subroutine60
    419          {
    420          	SHA_INFO sha_info;
    421          	uchar buf[64];
    422          	int i;
    423          
    424          	/* NOTE: the following initialization of the sha_info struct can be performed
    425          	   once when K is provisioned, and the results copied into sha_info at the
    426          	   start of this function. */
    427          	shaInitial(&sha_info);
    428          	for (i = 0; i < L_KEY; i++)
    429          		sha_info.digest[i] ^= K[i];
    430          
    431          	for (i = 0; i < 64; i++)
    432          		buf[i] = 0x5c;
    433          
    434          	for (i = 0; i < 4; i++)
    435          		buf[i+12] ^= Fmk[i];
    436          	for (i = 0; i < 16; i++)
    437          		buf[i+16] ^= RAND[i];
    438          
    439          	buf[11] ^= fi;
    440          
    441          	shaUpdate(&sha_info,buf,0,512);
    442          
    443          	/* perform (AX+B)mod G */
    444          	whiten(sha_info.digest);
    445          
    446          	for (i=0;i<L_AKS;i++)
    447          		AKS[i] = sha_info.digest[i];
    448          }
    449          
    450          /*
    451           *This function performs generation of UMAC key UAK.
    452           *
    453          */

   \                                 In segment CODE, align 2, keep-with-next
    454          void
    455          f11(uchar K[],uchar fi,uchar *RAND,uchar Fmk[],uchar *UAK)
   \                     f11:
   \   00000000   ....               RJMP    ?Subroutine59

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for B>`:
   \   00000000   EF755CD18F4B       DB 117, 239, 209, 92, 75, 143, 143, 81, 78, 243, 188, 195, 121, 74, 118
   \              518FF34EC3BC
   \              4A7976      
   \   0000000F   7E5E45ECE0         DB 94, 126, 236, 69, 224
   \                     `?<Initializer for G>`:
   \   00000014   000000000000       DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45
   \              000000000000
   \              000000000000
   \              2D00        
   \                     `?<Initializer for A>`:
   \   00000028   E99DC8C9D5EF       DB 157, 233, 201, 200, 239, 213, 120, 17, 72, 35, 20, 1, 144, 31, 45
   \              117823480114
   \              1F902D      
   \   00000037   3F49634C65         DB 73, 63, 76, 99, 101
    456          {
    457            SHA_INFO sha_info;
    458            uchar i, buf[64];
    459            int j;
    460            for(i=0;i<2;i++)
    461            {
    462              /* NOTE: the following initialization of the sha_info struct can be performed
    463              once when K is provisioned, and the results copied into sha_info at the
    464              start of this loop. */
    465              shaInitial(&sha_info);
    466              for (j = 0; j < L_KEY; j++)
    467                sha_info.digest[j] ^= K[j];
    468              for (j = 0; j < 64; j++)
    469                buf[j] = 0x5c;
    470              for (j = 0; j < 4; j++)
    471                buf[j+12] ^= Fmk[j];
    472              for (j = 0; j < 16; j++)
    473                buf[j+24] ^= RAND[j];
    474              buf[3] ^= i;
    475              buf[11] ^= fi;
    476              buf[19] ^= i;
    477              buf[35] ^= i;
    478              buf[51] ^= i;
    479              shaUpdate(&sha_info,buf,0,512);
    480              whiten(sha_info.digest);
    481              for (j=0;j<8;j++)
    482                UAK[8*i+j] = sha_info.digest[j];
    483            }
    484          }

   Maximum stack usage in bytes:

     Function        CSTACK RSTACK
     --------        ------ ------
     f0                167      2
       -> shaInitial   163      2
       -> shaUpdate    167      2
       -> whiten       163      2
     f1                179      2
       -> shaInitial   175      2
       -> shaUpdate    179      2
       -> whiten       175      2
     f11               172      4
       -> shaInitial   168      2
       -> shaUpdate    172      2
       -> whiten       168      2
     f1star            179      2
       -> shaInitial   175      2
       -> shaUpdate    179      2
       -> whiten       175      2
     f2                176      4
       -> shaInitial   172      2
       -> shaUpdate    176      2
       -> whiten       172      2
     f3                172      4
       -> shaInitial   168      2
       -> shaUpdate    172      2
       -> whiten       168      2
     f4                172      4
       -> shaInitial   168      2
       -> shaUpdate    172      2
       -> whiten       168      2
     f5                171      2
       -> shaInitial   167      2
       -> shaUpdate    171      2
       -> whiten       167      2
     f5star            171      2
       -> shaInitial   167      2
       -> shaUpdate    171      2
       -> whiten       167      2
     modred             27      4
     whiten             46      4
       -> modred        46      2
       -> modred        46      2


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     counter                 8
     B                      60
     whiten                128
     ?Subroutine20          10
     ?Subroutine17          20
     ?Subroutine11          14
     ?Subroutine32           8
     ?Subroutine5            6
     modred                140
     ?Subroutine21           8
     ?Subroutine13           8
     ?Subroutine12          14
     ?Subroutine22           4
     ?Subroutine54           6
     ?Subroutine38           6
     f0                    152
     ?Subroutine39          14
     ?Subroutine43           8
     ?Subroutine14           4
     ?Subroutine47           2
     ?Subroutine8            4
     ?Subroutine48          12
     ?Subroutine40           6
     ?Subroutine53           6
     ?Subroutine37          10
     ?Subroutine27           8
     ?Subroutine26          10
     ?Subroutine49           8
     ?Subroutine41           8
     ?Subroutine33          30
     ?Subroutine34           8
     ?Subroutine35           4
     ?Subroutine42          10
     f1                      0
     ?Subroutine58           6
     ?Subroutine0          170
     ?Subroutine31          14
     ?Subroutine51           6
     ?Subroutine57           4
     ?Subroutine50           8
     ?Subroutine45           8
     ?Subroutine44           8
     f1star                  2
     f2                    196
     ?Subroutine16           8
     ?Subroutine28           6
     ?Subroutine55           6
     ?Subroutine56           6
     ?Subroutine18           4
     ?Subroutine29          10
     ?Subroutine52           6
     ?Subroutine3           26
     ?Subroutine36          12
     ?Subroutine30          16
     f3                      0
     ?Subroutine59          42
     ?Subroutine25           6
     ?Subroutine10          20
     ?Subroutine9           12
     ?Subroutine7           12
     ?Subroutine6           16
     ?Subroutine2           66
     f4                      2
     f5                      0
     ?Subroutine60           6
     ?Subroutine1          132
     ?Subroutine46           8
     f5star                  2
     f11                     2
     ?<Initializer for B>   60
      Others                12

 
 1 524 bytes in segment CODE
    12 bytes in segment INITTAB
    60 bytes in segment NEAR_I
    60 bytes in segment NEAR_ID
     8 bytes in segment NEAR_Z
 
 1 584 bytes of CODE memory (+ 12 bytes shared)
    68 bytes of DATA memory

Errors: none
Warnings: none
